// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in2_TDATA,
        in2_TVALID,
        in2_TREADY,
        in2_TKEEP,
        in2_TSTRB,
        in2_TUSER,
        in2_TLAST,
        in2_TID,
        in2_TDEST,
        size_dout,
        size_empty_n,
        size_read,
        in2_stream_V_din,
        in2_stream_V_full_n,
        in2_stream_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in2_TDATA;
input   in2_TVALID;
output   in2_TREADY;
input  [3:0] in2_TKEEP;
input  [3:0] in2_TSTRB;
input  [3:0] in2_TUSER;
input  [0:0] in2_TLAST;
input  [4:0] in2_TID;
input  [4:0] in2_TDEST;
input  [31:0] size_dout;
input   size_empty_n;
output   size_read;
output  [31:0] in2_stream_V_din;
input   in2_stream_V_full_n;
output   in2_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in2_TREADY;
reg size_read;
reg in2_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in2_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln10_fu_132_p2;
reg    size_blk_n;
reg    in2_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln10_reg_156;
reg   [30:0] i_0_i_i_reg_117;
reg   [31:0] size_read_reg_151;
reg    ap_block_state1;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln10_fu_137_p2;
reg   [31:0] in_data_V_tmp_reg_165;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] i_0_i_i_cast_fu_128_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_data_V_U_apdone_blk;
wire   [31:0] in2_TDATA_int;
wire    in2_TVALID_int;
reg    in2_TREADY_int;
wire    regslice_both_in_data_V_U_ack_in;
wire    regslice_both_in_keep_V_U_apdone_blk;
wire   [3:0] in2_TKEEP_int;
wire    regslice_both_in_keep_V_U_vld_out;
wire    regslice_both_in_keep_V_U_ack_in;
wire    regslice_both_in_strb_V_U_apdone_blk;
wire   [3:0] in2_TSTRB_int;
wire    regslice_both_in_strb_V_U_vld_out;
wire    regslice_both_in_strb_V_U_ack_in;
wire    regslice_both_in_user_V_U_apdone_blk;
wire   [3:0] in2_TUSER_int;
wire    regslice_both_in_user_V_U_vld_out;
wire    regslice_both_in_user_V_U_ack_in;
wire    regslice_both_in_last_V_U_apdone_blk;
wire   [0:0] in2_TLAST_int;
wire    regslice_both_in_last_V_U_vld_out;
wire    regslice_both_in_last_V_U_ack_in;
wire    regslice_both_in_id_V_U_apdone_blk;
wire   [4:0] in2_TID_int;
wire    regslice_both_in_id_V_U_vld_out;
wire    regslice_both_in_id_V_U_ack_in;
wire    regslice_both_in_dest_V_U_apdone_blk;
wire   [4:0] in2_TDEST_int;
wire    regslice_both_in_dest_V_U_vld_out;
wire    regslice_both_in_dest_V_U_ack_in;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in2_TDATA),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in_data_V_U_ack_in),
    .data_out(in2_TDATA_int),
    .vld_out(in2_TVALID_int),
    .ack_out(in2_TREADY_int),
    .apdone_blk(regslice_both_in_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in2_TKEEP),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in_keep_V_U_ack_in),
    .data_out(in2_TKEEP_int),
    .vld_out(regslice_both_in_keep_V_U_vld_out),
    .ack_out(in2_TREADY_int),
    .apdone_blk(regslice_both_in_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in2_TSTRB),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in_strb_V_U_ack_in),
    .data_out(in2_TSTRB_int),
    .vld_out(regslice_both_in_strb_V_U_vld_out),
    .ack_out(in2_TREADY_int),
    .apdone_blk(regslice_both_in_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in2_TUSER),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in_user_V_U_ack_in),
    .data_out(in2_TUSER_int),
    .vld_out(regslice_both_in_user_V_U_vld_out),
    .ack_out(in2_TREADY_int),
    .apdone_blk(regslice_both_in_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in2_TLAST),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in_last_V_U_ack_in),
    .data_out(in2_TLAST_int),
    .vld_out(regslice_both_in_last_V_U_vld_out),
    .ack_out(in2_TREADY_int),
    .apdone_blk(regslice_both_in_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 5 ))
regslice_both_in_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in2_TID),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in_id_V_U_ack_in),
    .data_out(in2_TID_int),
    .vld_out(regslice_both_in_id_V_U_vld_out),
    .ack_out(in2_TREADY_int),
    .apdone_blk(regslice_both_in_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 5 ))
regslice_both_in_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in2_TDEST),
    .vld_in(in2_TVALID),
    .ack_in(regslice_both_in_dest_V_U_ack_in),
    .data_out(in2_TDEST_int),
    .vld_out(regslice_both_in_dest_V_U_vld_out),
    .ack_out(in2_TREADY_int),
    .apdone_blk(regslice_both_in_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_132_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_i_reg_117 <= add_ln10_fu_137_p2;
    end else if ((~((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_117 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_156 <= icmp_ln10_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_V_tmp_reg_165 <= in2_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read_reg_151 <= size_dout;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_132_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_TDATA_blk_n = in2_TVALID_int;
    end else begin
        in2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_TVALID == 1'b1) & (regslice_both_in_data_V_U_ack_in == 1'b1))) begin
        in2_TREADY = 1'b1;
    end else begin
        in2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_132_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_TREADY_int = 1'b1;
    end else begin
        in2_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_156 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_stream_V_blk_n = in2_stream_V_full_n;
    end else begin
        in2_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_156 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_stream_V_write = 1'b1;
    end else begin
        in2_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_blk_n = size_empty_n;
    end else begin
        size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read = 1'b1;
    end else begin
        size_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln10_fu_132_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln10_fu_132_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_137_p2 = (i_0_i_i_reg_117 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln10_reg_156 == 1'd1) & (in2_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln10_fu_132_p2 == 1'd1) & (in2_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln10_reg_156 == 1'd1) & (in2_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln10_fu_132_p2 == 1'd1) & (in2_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln10_reg_156 == 1'd1) & (in2_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln10_fu_132_p2 == 1'd1) & (in2_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln10_fu_132_p2 == 1'd1) & (in2_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln10_reg_156 == 1'd1) & (in2_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_0_i_i_cast_fu_128_p1 = i_0_i_i_reg_117;

assign icmp_ln10_fu_132_p2 = (($signed(i_0_i_i_cast_fu_128_p1) < $signed(size_read_reg_151)) ? 1'b1 : 1'b0);

assign in2_stream_V_din = in_data_V_tmp_reg_165;

endmodule //load_input
