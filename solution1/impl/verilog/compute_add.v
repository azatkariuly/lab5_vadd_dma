// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_add (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        a_dout,
        a_empty_n,
        a_read,
        size_dout,
        size_empty_n,
        size_read,
        size_out_din,
        size_out_full_n,
        size_out_write,
        in1_stream_V_dout,
        in1_stream_V_empty_n,
        in1_stream_V_read,
        in2_stream_V_dout,
        in2_stream_V_empty_n,
        in2_stream_V_read,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state14 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] a_dout;
input   a_empty_n;
output   a_read;
input  [31:0] size_dout;
input   size_empty_n;
output   size_read;
output  [31:0] size_out_din;
input   size_out_full_n;
output   size_out_write;
input  [31:0] in1_stream_V_dout;
input   in1_stream_V_empty_n;
output   in1_stream_V_read;
input  [31:0] in2_stream_V_dout;
input   in2_stream_V_empty_n;
output   in2_stream_V_read;
output  [31:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg a_read;
reg size_read;
reg size_out_write;
reg in1_stream_V_read;
reg in2_stream_V_read;
reg out_stream_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    a_blk_n;
reg    size_blk_n;
reg    size_out_blk_n;
reg    in1_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_205;
reg    in2_stream_V_blk_n;
reg    out_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] icmp_ln25_reg_205_pp0_iter10_reg;
reg   [30:0] i_0_i_i_reg_161;
reg   [31:0] a_read_reg_195;
reg    ap_block_state1;
reg   [31:0] size_read_reg_200;
wire   [0:0] icmp_ln25_fu_184_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_state13_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln25_reg_205_pp0_iter1_reg;
reg   [0:0] icmp_ln25_reg_205_pp0_iter2_reg;
reg   [0:0] icmp_ln25_reg_205_pp0_iter3_reg;
reg   [0:0] icmp_ln25_reg_205_pp0_iter4_reg;
reg   [0:0] icmp_ln25_reg_205_pp0_iter5_reg;
reg   [0:0] icmp_ln25_reg_205_pp0_iter6_reg;
reg   [0:0] icmp_ln25_reg_205_pp0_iter7_reg;
reg   [0:0] icmp_ln25_reg_205_pp0_iter8_reg;
reg   [0:0] icmp_ln25_reg_205_pp0_iter9_reg;
wire   [30:0] add_ln25_fu_189_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] tmp_reg_214;
reg   [31:0] tmp_1_reg_219;
reg   [31:0] tmp_1_reg_219_pp0_iter2_reg;
reg   [31:0] tmp_1_reg_219_pp0_iter3_reg;
reg   [31:0] tmp_1_reg_219_pp0_iter4_reg;
reg   [31:0] tmp_1_reg_219_pp0_iter5_reg;
wire   [31:0] grp_fu_176_p2;
reg   [31:0] tmp_2_i_i_reg_224;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] tmp_2_reg_229;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] i_0_i_i_cast_fu_180_p1;
reg    grp_fu_172_ce;
reg    grp_fu_176_ce;
wire    ap_CS_fsm_state14;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

krnl_vadd_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
krnl_vadd_fadd_32bkb_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_i_i_reg_224),
    .din1(tmp_1_reg_219_pp0_iter5_reg),
    .ce(grp_fu_172_ce),
    .dout(grp_fu_172_p2)
);

krnl_vadd_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
krnl_vadd_fmul_32cud_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_214),
    .din1(a_read_reg_195),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if ((~((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_i_i_reg_161 <= add_ln25_fu_189_p2;
    end else if ((~((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_161 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_read_reg_195 <= a_dout;
        size_read_reg_200 <= size_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_205 <= icmp_ln25_fu_184_p2;
        icmp_ln25_reg_205_pp0_iter1_reg <= icmp_ln25_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln25_reg_205_pp0_iter10_reg <= icmp_ln25_reg_205_pp0_iter9_reg;
        icmp_ln25_reg_205_pp0_iter2_reg <= icmp_ln25_reg_205_pp0_iter1_reg;
        icmp_ln25_reg_205_pp0_iter3_reg <= icmp_ln25_reg_205_pp0_iter2_reg;
        icmp_ln25_reg_205_pp0_iter4_reg <= icmp_ln25_reg_205_pp0_iter3_reg;
        icmp_ln25_reg_205_pp0_iter5_reg <= icmp_ln25_reg_205_pp0_iter4_reg;
        icmp_ln25_reg_205_pp0_iter6_reg <= icmp_ln25_reg_205_pp0_iter5_reg;
        icmp_ln25_reg_205_pp0_iter7_reg <= icmp_ln25_reg_205_pp0_iter6_reg;
        icmp_ln25_reg_205_pp0_iter8_reg <= icmp_ln25_reg_205_pp0_iter7_reg;
        icmp_ln25_reg_205_pp0_iter9_reg <= icmp_ln25_reg_205_pp0_iter8_reg;
        tmp_1_reg_219_pp0_iter2_reg <= tmp_1_reg_219;
        tmp_1_reg_219_pp0_iter3_reg <= tmp_1_reg_219_pp0_iter2_reg;
        tmp_1_reg_219_pp0_iter4_reg <= tmp_1_reg_219_pp0_iter3_reg;
        tmp_1_reg_219_pp0_iter5_reg <= tmp_1_reg_219_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_205 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_219 <= in2_stream_V_dout;
        tmp_reg_214 <= in1_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_205_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_i_i_reg_224 <= grp_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_205_pp0_iter9_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_229 <= grp_fu_172_p2;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_blk_n = a_empty_n;
    end else begin
        a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_read = 1'b1;
    end else begin
        a_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_184_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_172_ce = 1'b1;
    end else begin
        grp_fu_172_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_205 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_stream_V_blk_n = in1_stream_V_empty_n;
    end else begin
        in1_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_205 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in1_stream_V_read = 1'b1;
    end else begin
        in1_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_205 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_stream_V_blk_n = in2_stream_V_empty_n;
    end else begin
        in2_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_205 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in2_stream_V_read = 1'b1;
    end else begin
        in2_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_205_pp0_iter10_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_205_pp0_iter10_reg == 1'd1) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_blk_n = size_empty_n;
    end else begin
        size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_out_blk_n = size_out_full_n;
    end else begin
        size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_out_write = 1'b1;
    end else begin
        size_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read = 1'b1;
    end else begin
        size_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_184_p2 == 1'd0)) & ~((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_184_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_189_p2 = (i_0_i_i_reg_161 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln25_reg_205_pp0_iter10_reg == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln25_reg_205 == 1'd1) & (in2_stream_V_empty_n == 1'b0)) | ((icmp_ln25_reg_205 == 1'd1) & (in1_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln25_reg_205_pp0_iter10_reg == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln25_reg_205 == 1'd1) & (in2_stream_V_empty_n == 1'b0)) | ((icmp_ln25_reg_205 == 1'd1) & (in1_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln25_reg_205_pp0_iter10_reg == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln25_reg_205 == 1'd1) & (in2_stream_V_empty_n == 1'b0)) | ((icmp_ln25_reg_205 == 1'd1) & (in1_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (size_out_full_n == 1'b0) | (size_empty_n == 1'b0) | (1'b0 == a_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter11 = ((icmp_ln25_reg_205_pp0_iter10_reg == 1'd1) & (out_stream_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln25_reg_205 == 1'd1) & (in2_stream_V_empty_n == 1'b0)) | ((icmp_ln25_reg_205 == 1'd1) & (in1_stream_V_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_0_i_i_cast_fu_180_p1 = i_0_i_i_reg_161;

assign icmp_ln25_fu_184_p2 = (($signed(i_0_i_i_cast_fu_180_p1) < $signed(size_read_reg_200)) ? 1'b1 : 1'b0);

assign out_stream_V_din = tmp_2_reg_229;

assign size_out_din = size_dout;

assign start_out = real_start;

endmodule //compute_add
