// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="krnl_vadd,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.268000,HLS_SYN_LAT=4112,HLS_SYN_TPT=4109,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1175,HLS_SYN_LUT=2050,HLS_VERSION=2020_1}" *)

module krnl_vadd (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        in1_TDATA,
        in1_TKEEP,
        in1_TSTRB,
        in1_TUSER,
        in1_TLAST,
        in1_TID,
        in1_TDEST,
        in2_TDATA,
        in2_TKEEP,
        in2_TSTRB,
        in2_TUSER,
        in2_TLAST,
        in2_TID,
        in2_TDEST,
        out_r_TDATA,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST,
        in1_TVALID,
        in1_TREADY,
        in2_TVALID,
        in2_TREADY,
        out_r_TVALID,
        out_r_TREADY
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
input  [31:0] in1_TDATA;
input  [3:0] in1_TKEEP;
input  [3:0] in1_TSTRB;
input  [3:0] in1_TUSER;
input  [0:0] in1_TLAST;
input  [4:0] in1_TID;
input  [4:0] in1_TDEST;
input  [31:0] in2_TDATA;
input  [3:0] in2_TKEEP;
input  [3:0] in2_TSTRB;
input  [3:0] in2_TUSER;
input  [0:0] in2_TLAST;
input  [4:0] in2_TID;
input  [4:0] in2_TDEST;
output  [31:0] out_r_TDATA;
output  [3:0] out_r_TKEEP;
output  [3:0] out_r_TSTRB;
output  [3:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [4:0] out_r_TID;
output  [4:0] out_r_TDEST;
input   in1_TVALID;
output   in1_TREADY;
input   in2_TVALID;
output   in2_TREADY;
output   out_r_TVALID;
input   out_r_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] a;
wire   [31:0] size;
wire    krnl_vadd_entry42_U0_ap_start;
wire    krnl_vadd_entry42_U0_ap_done;
wire    krnl_vadd_entry42_U0_ap_continue;
wire    krnl_vadd_entry42_U0_ap_idle;
wire    krnl_vadd_entry42_U0_ap_ready;
wire    krnl_vadd_entry42_U0_start_out;
wire    krnl_vadd_entry42_U0_start_write;
wire   [31:0] krnl_vadd_entry42_U0_a_out_din;
wire    krnl_vadd_entry42_U0_a_out_write;
wire   [31:0] krnl_vadd_entry42_U0_size_out_din;
wire    krnl_vadd_entry42_U0_size_out_write;
wire   [31:0] krnl_vadd_entry42_U0_size_out1_din;
wire    krnl_vadd_entry42_U0_size_out1_write;
wire    load_input20_U0_ap_start;
wire    load_input20_U0_ap_done;
wire    load_input20_U0_ap_continue;
wire    load_input20_U0_ap_idle;
wire    load_input20_U0_ap_ready;
wire    load_input20_U0_in1_TREADY;
wire    load_input20_U0_size_read;
wire   [31:0] load_input20_U0_size_out_din;
wire    load_input20_U0_size_out_write;
wire   [31:0] load_input20_U0_in1_stream_V_din;
wire    load_input20_U0_in1_stream_V_write;
wire    load_input_U0_ap_start;
wire    load_input_U0_ap_done;
wire    load_input_U0_ap_continue;
wire    load_input_U0_ap_idle;
wire    load_input_U0_ap_ready;
wire    load_input_U0_in2_TREADY;
wire    load_input_U0_size_read;
wire   [31:0] load_input_U0_in2_stream_V_din;
wire    load_input_U0_in2_stream_V_write;
wire    compute_add_U0_ap_start;
wire    compute_add_U0_ap_done;
wire    compute_add_U0_ap_continue;
wire    compute_add_U0_ap_idle;
wire    compute_add_U0_ap_ready;
wire    compute_add_U0_start_out;
wire    compute_add_U0_start_write;
wire    compute_add_U0_a_read;
wire    compute_add_U0_size_read;
wire   [31:0] compute_add_U0_size_out_din;
wire    compute_add_U0_size_out_write;
wire    compute_add_U0_in1_stream_V_read;
wire    compute_add_U0_in2_stream_V_read;
wire   [31:0] compute_add_U0_out_stream_V_din;
wire    compute_add_U0_out_stream_V_write;
wire    store_result_U0_ap_start;
wire    store_result_U0_ap_done;
wire    store_result_U0_ap_continue;
wire    store_result_U0_ap_idle;
wire    store_result_U0_ap_ready;
wire   [31:0] store_result_U0_out_r_TDATA;
wire    store_result_U0_out_r_TVALID;
wire   [3:0] store_result_U0_out_r_TKEEP;
wire   [3:0] store_result_U0_out_r_TSTRB;
wire   [3:0] store_result_U0_out_r_TUSER;
wire   [0:0] store_result_U0_out_r_TLAST;
wire   [4:0] store_result_U0_out_r_TID;
wire   [4:0] store_result_U0_out_r_TDEST;
wire    store_result_U0_size_read;
wire    store_result_U0_out_stream_V_read;
wire    ap_sync_continue;
wire    a_c_full_n;
wire   [31:0] a_c_dout;
wire    a_c_empty_n;
wire    size_c_full_n;
wire   [31:0] size_c_dout;
wire    size_c_empty_n;
wire    size_c9_full_n;
wire   [31:0] size_c9_dout;
wire    size_c9_empty_n;
wire    size_c10_full_n;
wire   [31:0] size_c10_dout;
wire    size_c10_empty_n;
wire    in1_stream_V_full_n;
wire   [31:0] in1_stream_V_dout;
wire    in1_stream_V_empty_n;
wire    in2_stream_V_full_n;
wire   [31:0] in2_stream_V_dout;
wire    in2_stream_V_empty_n;
wire    size_c11_full_n;
wire   [31:0] size_c11_dout;
wire    size_c11_empty_n;
wire    out_stream_V_full_n;
wire   [31:0] out_stream_V_dout;
wire    out_stream_V_empty_n;
wire   [0:0] start_for_compute_add_U0_din;
wire    start_for_compute_add_U0_full_n;
wire   [0:0] start_for_compute_add_U0_dout;
wire    start_for_compute_add_U0_empty_n;
wire    load_input20_U0_start_full_n;
wire    load_input20_U0_start_write;
wire    load_input_U0_start_full_n;
wire    load_input_U0_start_write;
wire   [0:0] start_for_store_result_U0_din;
wire    start_for_store_result_U0_full_n;
wire   [0:0] start_for_store_result_U0_dout;
wire    start_for_store_result_U0_empty_n;
wire    store_result_U0_start_full_n;
wire    store_result_U0_start_write;

krnl_vadd_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
krnl_vadd_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a(a),
    .size(size)
);

krnl_vadd_entry42 krnl_vadd_entry42_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(krnl_vadd_entry42_U0_ap_start),
    .start_full_n(start_for_compute_add_U0_full_n),
    .ap_done(krnl_vadd_entry42_U0_ap_done),
    .ap_continue(krnl_vadd_entry42_U0_ap_continue),
    .ap_idle(krnl_vadd_entry42_U0_ap_idle),
    .ap_ready(krnl_vadd_entry42_U0_ap_ready),
    .start_out(krnl_vadd_entry42_U0_start_out),
    .start_write(krnl_vadd_entry42_U0_start_write),
    .a(a),
    .size(size),
    .a_out_din(krnl_vadd_entry42_U0_a_out_din),
    .a_out_full_n(a_c_full_n),
    .a_out_write(krnl_vadd_entry42_U0_a_out_write),
    .size_out_din(krnl_vadd_entry42_U0_size_out_din),
    .size_out_full_n(size_c_full_n),
    .size_out_write(krnl_vadd_entry42_U0_size_out_write),
    .size_out1_din(krnl_vadd_entry42_U0_size_out1_din),
    .size_out1_full_n(size_c9_full_n),
    .size_out1_write(krnl_vadd_entry42_U0_size_out1_write)
);

load_input20 load_input20_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(load_input20_U0_ap_start),
    .ap_done(load_input20_U0_ap_done),
    .ap_continue(load_input20_U0_ap_continue),
    .ap_idle(load_input20_U0_ap_idle),
    .ap_ready(load_input20_U0_ap_ready),
    .in1_TDATA(in1_TDATA),
    .in1_TVALID(in1_TVALID),
    .in1_TREADY(load_input20_U0_in1_TREADY),
    .in1_TKEEP(in1_TKEEP),
    .in1_TSTRB(in1_TSTRB),
    .in1_TUSER(in1_TUSER),
    .in1_TLAST(in1_TLAST),
    .in1_TID(in1_TID),
    .in1_TDEST(in1_TDEST),
    .size_dout(size_c_dout),
    .size_empty_n(size_c_empty_n),
    .size_read(load_input20_U0_size_read),
    .size_out_din(load_input20_U0_size_out_din),
    .size_out_full_n(size_c10_full_n),
    .size_out_write(load_input20_U0_size_out_write),
    .in1_stream_V_din(load_input20_U0_in1_stream_V_din),
    .in1_stream_V_full_n(in1_stream_V_full_n),
    .in1_stream_V_write(load_input20_U0_in1_stream_V_write)
);

load_input load_input_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(load_input_U0_ap_start),
    .ap_done(load_input_U0_ap_done),
    .ap_continue(load_input_U0_ap_continue),
    .ap_idle(load_input_U0_ap_idle),
    .ap_ready(load_input_U0_ap_ready),
    .in2_TDATA(in2_TDATA),
    .in2_TVALID(in2_TVALID),
    .in2_TREADY(load_input_U0_in2_TREADY),
    .in2_TKEEP(in2_TKEEP),
    .in2_TSTRB(in2_TSTRB),
    .in2_TUSER(in2_TUSER),
    .in2_TLAST(in2_TLAST),
    .in2_TID(in2_TID),
    .in2_TDEST(in2_TDEST),
    .size_dout(size_c9_dout),
    .size_empty_n(size_c9_empty_n),
    .size_read(load_input_U0_size_read),
    .in2_stream_V_din(load_input_U0_in2_stream_V_din),
    .in2_stream_V_full_n(in2_stream_V_full_n),
    .in2_stream_V_write(load_input_U0_in2_stream_V_write)
);

compute_add compute_add_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(compute_add_U0_ap_start),
    .start_full_n(start_for_store_result_U0_full_n),
    .ap_done(compute_add_U0_ap_done),
    .ap_continue(compute_add_U0_ap_continue),
    .ap_idle(compute_add_U0_ap_idle),
    .ap_ready(compute_add_U0_ap_ready),
    .start_out(compute_add_U0_start_out),
    .start_write(compute_add_U0_start_write),
    .a_dout(a_c_dout),
    .a_empty_n(a_c_empty_n),
    .a_read(compute_add_U0_a_read),
    .size_dout(size_c10_dout),
    .size_empty_n(size_c10_empty_n),
    .size_read(compute_add_U0_size_read),
    .size_out_din(compute_add_U0_size_out_din),
    .size_out_full_n(size_c11_full_n),
    .size_out_write(compute_add_U0_size_out_write),
    .in1_stream_V_dout(in1_stream_V_dout),
    .in1_stream_V_empty_n(in1_stream_V_empty_n),
    .in1_stream_V_read(compute_add_U0_in1_stream_V_read),
    .in2_stream_V_dout(in2_stream_V_dout),
    .in2_stream_V_empty_n(in2_stream_V_empty_n),
    .in2_stream_V_read(compute_add_U0_in2_stream_V_read),
    .out_stream_V_din(compute_add_U0_out_stream_V_din),
    .out_stream_V_full_n(out_stream_V_full_n),
    .out_stream_V_write(compute_add_U0_out_stream_V_write)
);

store_result store_result_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(store_result_U0_ap_start),
    .ap_done(store_result_U0_ap_done),
    .ap_continue(store_result_U0_ap_continue),
    .ap_idle(store_result_U0_ap_idle),
    .ap_ready(store_result_U0_ap_ready),
    .out_r_TDATA(store_result_U0_out_r_TDATA),
    .out_r_TVALID(store_result_U0_out_r_TVALID),
    .out_r_TREADY(out_r_TREADY),
    .out_r_TKEEP(store_result_U0_out_r_TKEEP),
    .out_r_TSTRB(store_result_U0_out_r_TSTRB),
    .out_r_TUSER(store_result_U0_out_r_TUSER),
    .out_r_TLAST(store_result_U0_out_r_TLAST),
    .out_r_TID(store_result_U0_out_r_TID),
    .out_r_TDEST(store_result_U0_out_r_TDEST),
    .size_dout(size_c11_dout),
    .size_empty_n(size_c11_empty_n),
    .size_read(store_result_U0_size_read),
    .out_stream_V_dout(out_stream_V_dout),
    .out_stream_V_empty_n(out_stream_V_empty_n),
    .out_stream_V_read(store_result_U0_out_stream_V_read)
);

fifo_w32_d3_A a_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(krnl_vadd_entry42_U0_a_out_din),
    .if_full_n(a_c_full_n),
    .if_write(krnl_vadd_entry42_U0_a_out_write),
    .if_dout(a_c_dout),
    .if_empty_n(a_c_empty_n),
    .if_read(compute_add_U0_a_read)
);

fifo_w32_d2_A size_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(krnl_vadd_entry42_U0_size_out_din),
    .if_full_n(size_c_full_n),
    .if_write(krnl_vadd_entry42_U0_size_out_write),
    .if_dout(size_c_dout),
    .if_empty_n(size_c_empty_n),
    .if_read(load_input20_U0_size_read)
);

fifo_w32_d2_A size_c9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(krnl_vadd_entry42_U0_size_out1_din),
    .if_full_n(size_c9_full_n),
    .if_write(krnl_vadd_entry42_U0_size_out1_write),
    .if_dout(size_c9_dout),
    .if_empty_n(size_c9_empty_n),
    .if_read(load_input_U0_size_read)
);

fifo_w32_d2_A size_c10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(load_input20_U0_size_out_din),
    .if_full_n(size_c10_full_n),
    .if_write(load_input20_U0_size_out_write),
    .if_dout(size_c10_dout),
    .if_empty_n(size_c10_empty_n),
    .if_read(compute_add_U0_size_read)
);

fifo_w32_d2_A in1_stream_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(load_input20_U0_in1_stream_V_din),
    .if_full_n(in1_stream_V_full_n),
    .if_write(load_input20_U0_in1_stream_V_write),
    .if_dout(in1_stream_V_dout),
    .if_empty_n(in1_stream_V_empty_n),
    .if_read(compute_add_U0_in1_stream_V_read)
);

fifo_w32_d2_A in2_stream_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(load_input_U0_in2_stream_V_din),
    .if_full_n(in2_stream_V_full_n),
    .if_write(load_input_U0_in2_stream_V_write),
    .if_dout(in2_stream_V_dout),
    .if_empty_n(in2_stream_V_empty_n),
    .if_read(compute_add_U0_in2_stream_V_read)
);

fifo_w32_d2_A size_c11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(compute_add_U0_size_out_din),
    .if_full_n(size_c11_full_n),
    .if_write(compute_add_U0_size_out_write),
    .if_dout(size_c11_dout),
    .if_empty_n(size_c11_empty_n),
    .if_read(store_result_U0_size_read)
);

fifo_w32_d2_A out_stream_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(compute_add_U0_out_stream_V_din),
    .if_full_n(out_stream_V_full_n),
    .if_write(compute_add_U0_out_stream_V_write),
    .if_dout(out_stream_V_dout),
    .if_empty_n(out_stream_V_empty_n),
    .if_read(store_result_U0_out_stream_V_read)
);

start_for_computedEe start_for_computedEe_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_compute_add_U0_din),
    .if_full_n(start_for_compute_add_U0_full_n),
    .if_write(krnl_vadd_entry42_U0_start_write),
    .if_dout(start_for_compute_add_U0_dout),
    .if_empty_n(start_for_compute_add_U0_empty_n),
    .if_read(compute_add_U0_ap_ready)
);

start_for_store_reOg start_for_store_reOg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_store_result_U0_din),
    .if_full_n(start_for_store_result_U0_full_n),
    .if_write(compute_add_U0_start_write),
    .if_dout(start_for_store_result_U0_dout),
    .if_empty_n(start_for_store_result_U0_empty_n),
    .if_read(store_result_U0_ap_ready)
);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b0;

assign compute_add_U0_ap_continue = 1'b1;

assign compute_add_U0_ap_start = start_for_compute_add_U0_empty_n;

assign in1_TREADY = load_input20_U0_in1_TREADY;

assign in2_TREADY = load_input_U0_in2_TREADY;

assign krnl_vadd_entry42_U0_ap_continue = 1'b1;

assign krnl_vadd_entry42_U0_ap_start = 1'b1;

assign load_input20_U0_ap_continue = 1'b1;

assign load_input20_U0_ap_start = 1'b1;

assign load_input20_U0_start_full_n = 1'b1;

assign load_input20_U0_start_write = 1'b0;

assign load_input_U0_ap_continue = 1'b1;

assign load_input_U0_ap_start = 1'b1;

assign load_input_U0_start_full_n = 1'b1;

assign load_input_U0_start_write = 1'b0;

assign out_r_TDATA = store_result_U0_out_r_TDATA;

assign out_r_TDEST = store_result_U0_out_r_TDEST;

assign out_r_TID = store_result_U0_out_r_TID;

assign out_r_TKEEP = store_result_U0_out_r_TKEEP;

assign out_r_TLAST = store_result_U0_out_r_TLAST;

assign out_r_TSTRB = store_result_U0_out_r_TSTRB;

assign out_r_TUSER = store_result_U0_out_r_TUSER;

assign out_r_TVALID = store_result_U0_out_r_TVALID;

assign start_for_compute_add_U0_din = 1'b1;

assign start_for_store_result_U0_din = 1'b1;

assign store_result_U0_ap_continue = 1'b1;

assign store_result_U0_ap_start = start_for_store_result_U0_empty_n;

assign store_result_U0_start_full_n = 1'b1;

assign store_result_U0_start_write = 1'b0;

endmodule //krnl_vadd
