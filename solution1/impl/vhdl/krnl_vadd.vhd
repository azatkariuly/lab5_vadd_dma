-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_vadd is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in1_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in1_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in1_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    in2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in2_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in2_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in2_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in2_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    in1_TVALID : IN STD_LOGIC;
    in1_TREADY : OUT STD_LOGIC;
    in2_TVALID : IN STD_LOGIC;
    in2_TREADY : OUT STD_LOGIC;
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of krnl_vadd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "krnl_vadd,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.268000,HLS_SYN_LAT=4112,HLS_SYN_TPT=4109,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1175,HLS_SYN_LUT=2050,HLS_VERSION=2020_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal krnl_vadd_entry42_U0_ap_start : STD_LOGIC;
    signal krnl_vadd_entry42_U0_ap_done : STD_LOGIC;
    signal krnl_vadd_entry42_U0_ap_continue : STD_LOGIC;
    signal krnl_vadd_entry42_U0_ap_idle : STD_LOGIC;
    signal krnl_vadd_entry42_U0_ap_ready : STD_LOGIC;
    signal krnl_vadd_entry42_U0_start_out : STD_LOGIC;
    signal krnl_vadd_entry42_U0_start_write : STD_LOGIC;
    signal krnl_vadd_entry42_U0_a_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal krnl_vadd_entry42_U0_a_out_write : STD_LOGIC;
    signal krnl_vadd_entry42_U0_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal krnl_vadd_entry42_U0_size_out_write : STD_LOGIC;
    signal krnl_vadd_entry42_U0_size_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal krnl_vadd_entry42_U0_size_out1_write : STD_LOGIC;
    signal load_input20_U0_ap_start : STD_LOGIC;
    signal load_input20_U0_ap_done : STD_LOGIC;
    signal load_input20_U0_ap_continue : STD_LOGIC;
    signal load_input20_U0_ap_idle : STD_LOGIC;
    signal load_input20_U0_ap_ready : STD_LOGIC;
    signal load_input20_U0_in1_TREADY : STD_LOGIC;
    signal load_input20_U0_size_read : STD_LOGIC;
    signal load_input20_U0_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input20_U0_size_out_write : STD_LOGIC;
    signal load_input20_U0_in1_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input20_U0_in1_stream_V_write : STD_LOGIC;
    signal load_input_U0_ap_start : STD_LOGIC;
    signal load_input_U0_ap_done : STD_LOGIC;
    signal load_input_U0_ap_continue : STD_LOGIC;
    signal load_input_U0_ap_idle : STD_LOGIC;
    signal load_input_U0_ap_ready : STD_LOGIC;
    signal load_input_U0_in2_TREADY : STD_LOGIC;
    signal load_input_U0_size_read : STD_LOGIC;
    signal load_input_U0_in2_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_in2_stream_V_write : STD_LOGIC;
    signal compute_add_U0_ap_start : STD_LOGIC;
    signal compute_add_U0_ap_done : STD_LOGIC;
    signal compute_add_U0_ap_continue : STD_LOGIC;
    signal compute_add_U0_ap_idle : STD_LOGIC;
    signal compute_add_U0_ap_ready : STD_LOGIC;
    signal compute_add_U0_start_out : STD_LOGIC;
    signal compute_add_U0_start_write : STD_LOGIC;
    signal compute_add_U0_a_read : STD_LOGIC;
    signal compute_add_U0_size_read : STD_LOGIC;
    signal compute_add_U0_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_add_U0_size_out_write : STD_LOGIC;
    signal compute_add_U0_in1_stream_V_read : STD_LOGIC;
    signal compute_add_U0_in2_stream_V_read : STD_LOGIC;
    signal compute_add_U0_out_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_add_U0_out_stream_V_write : STD_LOGIC;
    signal store_result_U0_ap_start : STD_LOGIC;
    signal store_result_U0_ap_done : STD_LOGIC;
    signal store_result_U0_ap_continue : STD_LOGIC;
    signal store_result_U0_ap_idle : STD_LOGIC;
    signal store_result_U0_ap_ready : STD_LOGIC;
    signal store_result_U0_out_r_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_out_r_TVALID : STD_LOGIC;
    signal store_result_U0_out_r_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_out_r_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_out_r_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_out_r_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal store_result_U0_out_r_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal store_result_U0_size_read : STD_LOGIC;
    signal store_result_U0_out_stream_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal a_c_full_n : STD_LOGIC;
    signal a_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal a_c_empty_n : STD_LOGIC;
    signal size_c_full_n : STD_LOGIC;
    signal size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c_empty_n : STD_LOGIC;
    signal size_c9_full_n : STD_LOGIC;
    signal size_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c9_empty_n : STD_LOGIC;
    signal size_c10_full_n : STD_LOGIC;
    signal size_c10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c10_empty_n : STD_LOGIC;
    signal in1_stream_V_full_n : STD_LOGIC;
    signal in1_stream_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_stream_V_empty_n : STD_LOGIC;
    signal in2_stream_V_full_n : STD_LOGIC;
    signal in2_stream_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_stream_V_empty_n : STD_LOGIC;
    signal size_c11_full_n : STD_LOGIC;
    signal size_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c11_empty_n : STD_LOGIC;
    signal out_stream_V_full_n : STD_LOGIC;
    signal out_stream_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_empty_n : STD_LOGIC;
    signal start_for_compute_add_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_add_U0_full_n : STD_LOGIC;
    signal start_for_compute_add_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_add_U0_empty_n : STD_LOGIC;
    signal load_input20_U0_start_full_n : STD_LOGIC;
    signal load_input20_U0_start_write : STD_LOGIC;
    signal load_input_U0_start_full_n : STD_LOGIC;
    signal load_input_U0_start_write : STD_LOGIC;
    signal start_for_store_result_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_result_U0_full_n : STD_LOGIC;
    signal start_for_store_result_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_result_U0_empty_n : STD_LOGIC;
    signal store_result_U0_start_full_n : STD_LOGIC;
    signal store_result_U0_start_write : STD_LOGIC;

    component krnl_vadd_entry42 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        a_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_out_full_n : IN STD_LOGIC;
        a_out_write : OUT STD_LOGIC;
        size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        size_out_full_n : IN STD_LOGIC;
        size_out_write : OUT STD_LOGIC;
        size_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        size_out1_full_n : IN STD_LOGIC;
        size_out1_write : OUT STD_LOGIC );
    end component;


    component load_input20 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_TVALID : IN STD_LOGIC;
        in1_TREADY : OUT STD_LOGIC;
        in1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in1_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        in1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in1_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        in1_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
        size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        size_empty_n : IN STD_LOGIC;
        size_read : OUT STD_LOGIC;
        size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        size_out_full_n : IN STD_LOGIC;
        size_out_write : OUT STD_LOGIC;
        in1_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_V_full_n : IN STD_LOGIC;
        in1_stream_V_write : OUT STD_LOGIC );
    end component;


    component load_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in2_TVALID : IN STD_LOGIC;
        in2_TREADY : OUT STD_LOGIC;
        in2_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in2_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in2_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        in2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in2_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        in2_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
        size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        size_empty_n : IN STD_LOGIC;
        size_read : OUT STD_LOGIC;
        in2_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        in2_stream_V_full_n : IN STD_LOGIC;
        in2_stream_V_write : OUT STD_LOGIC );
    end component;


    component compute_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        a_empty_n : IN STD_LOGIC;
        a_read : OUT STD_LOGIC;
        size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        size_empty_n : IN STD_LOGIC;
        size_read : OUT STD_LOGIC;
        size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        size_out_full_n : IN STD_LOGIC;
        size_out_write : OUT STD_LOGIC;
        in1_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_V_empty_n : IN STD_LOGIC;
        in1_stream_V_read : OUT STD_LOGIC;
        in2_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in2_stream_V_empty_n : IN STD_LOGIC;
        in2_stream_V_read : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC );
    end component;


    component store_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_r_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
        size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        size_empty_n : IN STD_LOGIC;
        size_read : OUT STD_LOGIC;
        out_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_empty_n : IN STD_LOGIC;
        out_stream_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_computedEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_store_reOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_vadd_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    krnl_vadd_AXILiteS_s_axi_U : component krnl_vadd_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        a => a,
        size => size);

    krnl_vadd_entry42_U0 : component krnl_vadd_entry42
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => krnl_vadd_entry42_U0_ap_start,
        start_full_n => start_for_compute_add_U0_full_n,
        ap_done => krnl_vadd_entry42_U0_ap_done,
        ap_continue => krnl_vadd_entry42_U0_ap_continue,
        ap_idle => krnl_vadd_entry42_U0_ap_idle,
        ap_ready => krnl_vadd_entry42_U0_ap_ready,
        start_out => krnl_vadd_entry42_U0_start_out,
        start_write => krnl_vadd_entry42_U0_start_write,
        a => a,
        size => size,
        a_out_din => krnl_vadd_entry42_U0_a_out_din,
        a_out_full_n => a_c_full_n,
        a_out_write => krnl_vadd_entry42_U0_a_out_write,
        size_out_din => krnl_vadd_entry42_U0_size_out_din,
        size_out_full_n => size_c_full_n,
        size_out_write => krnl_vadd_entry42_U0_size_out_write,
        size_out1_din => krnl_vadd_entry42_U0_size_out1_din,
        size_out1_full_n => size_c9_full_n,
        size_out1_write => krnl_vadd_entry42_U0_size_out1_write);

    load_input20_U0 : component load_input20
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load_input20_U0_ap_start,
        ap_done => load_input20_U0_ap_done,
        ap_continue => load_input20_U0_ap_continue,
        ap_idle => load_input20_U0_ap_idle,
        ap_ready => load_input20_U0_ap_ready,
        in1_TDATA => in1_TDATA,
        in1_TVALID => in1_TVALID,
        in1_TREADY => load_input20_U0_in1_TREADY,
        in1_TKEEP => in1_TKEEP,
        in1_TSTRB => in1_TSTRB,
        in1_TUSER => in1_TUSER,
        in1_TLAST => in1_TLAST,
        in1_TID => in1_TID,
        in1_TDEST => in1_TDEST,
        size_dout => size_c_dout,
        size_empty_n => size_c_empty_n,
        size_read => load_input20_U0_size_read,
        size_out_din => load_input20_U0_size_out_din,
        size_out_full_n => size_c10_full_n,
        size_out_write => load_input20_U0_size_out_write,
        in1_stream_V_din => load_input20_U0_in1_stream_V_din,
        in1_stream_V_full_n => in1_stream_V_full_n,
        in1_stream_V_write => load_input20_U0_in1_stream_V_write);

    load_input_U0 : component load_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load_input_U0_ap_start,
        ap_done => load_input_U0_ap_done,
        ap_continue => load_input_U0_ap_continue,
        ap_idle => load_input_U0_ap_idle,
        ap_ready => load_input_U0_ap_ready,
        in2_TDATA => in2_TDATA,
        in2_TVALID => in2_TVALID,
        in2_TREADY => load_input_U0_in2_TREADY,
        in2_TKEEP => in2_TKEEP,
        in2_TSTRB => in2_TSTRB,
        in2_TUSER => in2_TUSER,
        in2_TLAST => in2_TLAST,
        in2_TID => in2_TID,
        in2_TDEST => in2_TDEST,
        size_dout => size_c9_dout,
        size_empty_n => size_c9_empty_n,
        size_read => load_input_U0_size_read,
        in2_stream_V_din => load_input_U0_in2_stream_V_din,
        in2_stream_V_full_n => in2_stream_V_full_n,
        in2_stream_V_write => load_input_U0_in2_stream_V_write);

    compute_add_U0 : component compute_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_add_U0_ap_start,
        start_full_n => start_for_store_result_U0_full_n,
        ap_done => compute_add_U0_ap_done,
        ap_continue => compute_add_U0_ap_continue,
        ap_idle => compute_add_U0_ap_idle,
        ap_ready => compute_add_U0_ap_ready,
        start_out => compute_add_U0_start_out,
        start_write => compute_add_U0_start_write,
        a_dout => a_c_dout,
        a_empty_n => a_c_empty_n,
        a_read => compute_add_U0_a_read,
        size_dout => size_c10_dout,
        size_empty_n => size_c10_empty_n,
        size_read => compute_add_U0_size_read,
        size_out_din => compute_add_U0_size_out_din,
        size_out_full_n => size_c11_full_n,
        size_out_write => compute_add_U0_size_out_write,
        in1_stream_V_dout => in1_stream_V_dout,
        in1_stream_V_empty_n => in1_stream_V_empty_n,
        in1_stream_V_read => compute_add_U0_in1_stream_V_read,
        in2_stream_V_dout => in2_stream_V_dout,
        in2_stream_V_empty_n => in2_stream_V_empty_n,
        in2_stream_V_read => compute_add_U0_in2_stream_V_read,
        out_stream_V_din => compute_add_U0_out_stream_V_din,
        out_stream_V_full_n => out_stream_V_full_n,
        out_stream_V_write => compute_add_U0_out_stream_V_write);

    store_result_U0 : component store_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => store_result_U0_ap_start,
        ap_done => store_result_U0_ap_done,
        ap_continue => store_result_U0_ap_continue,
        ap_idle => store_result_U0_ap_idle,
        ap_ready => store_result_U0_ap_ready,
        out_r_TDATA => store_result_U0_out_r_TDATA,
        out_r_TVALID => store_result_U0_out_r_TVALID,
        out_r_TREADY => out_r_TREADY,
        out_r_TKEEP => store_result_U0_out_r_TKEEP,
        out_r_TSTRB => store_result_U0_out_r_TSTRB,
        out_r_TUSER => store_result_U0_out_r_TUSER,
        out_r_TLAST => store_result_U0_out_r_TLAST,
        out_r_TID => store_result_U0_out_r_TID,
        out_r_TDEST => store_result_U0_out_r_TDEST,
        size_dout => size_c11_dout,
        size_empty_n => size_c11_empty_n,
        size_read => store_result_U0_size_read,
        out_stream_V_dout => out_stream_V_dout,
        out_stream_V_empty_n => out_stream_V_empty_n,
        out_stream_V_read => store_result_U0_out_stream_V_read);

    a_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_vadd_entry42_U0_a_out_din,
        if_full_n => a_c_full_n,
        if_write => krnl_vadd_entry42_U0_a_out_write,
        if_dout => a_c_dout,
        if_empty_n => a_c_empty_n,
        if_read => compute_add_U0_a_read);

    size_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_vadd_entry42_U0_size_out_din,
        if_full_n => size_c_full_n,
        if_write => krnl_vadd_entry42_U0_size_out_write,
        if_dout => size_c_dout,
        if_empty_n => size_c_empty_n,
        if_read => load_input20_U0_size_read);

    size_c9_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_vadd_entry42_U0_size_out1_din,
        if_full_n => size_c9_full_n,
        if_write => krnl_vadd_entry42_U0_size_out1_write,
        if_dout => size_c9_dout,
        if_empty_n => size_c9_empty_n,
        if_read => load_input_U0_size_read);

    size_c10_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input20_U0_size_out_din,
        if_full_n => size_c10_full_n,
        if_write => load_input20_U0_size_out_write,
        if_dout => size_c10_dout,
        if_empty_n => size_c10_empty_n,
        if_read => compute_add_U0_size_read);

    in1_stream_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input20_U0_in1_stream_V_din,
        if_full_n => in1_stream_V_full_n,
        if_write => load_input20_U0_in1_stream_V_write,
        if_dout => in1_stream_V_dout,
        if_empty_n => in1_stream_V_empty_n,
        if_read => compute_add_U0_in1_stream_V_read);

    in2_stream_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input_U0_in2_stream_V_din,
        if_full_n => in2_stream_V_full_n,
        if_write => load_input_U0_in2_stream_V_write,
        if_dout => in2_stream_V_dout,
        if_empty_n => in2_stream_V_empty_n,
        if_read => compute_add_U0_in2_stream_V_read);

    size_c11_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_add_U0_size_out_din,
        if_full_n => size_c11_full_n,
        if_write => compute_add_U0_size_out_write,
        if_dout => size_c11_dout,
        if_empty_n => size_c11_empty_n,
        if_read => store_result_U0_size_read);

    out_stream_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_add_U0_out_stream_V_din,
        if_full_n => out_stream_V_full_n,
        if_write => compute_add_U0_out_stream_V_write,
        if_dout => out_stream_V_dout,
        if_empty_n => out_stream_V_empty_n,
        if_read => store_result_U0_out_stream_V_read);

    start_for_computedEe_U : component start_for_computedEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute_add_U0_din,
        if_full_n => start_for_compute_add_U0_full_n,
        if_write => krnl_vadd_entry42_U0_start_write,
        if_dout => start_for_compute_add_U0_dout,
        if_empty_n => start_for_compute_add_U0_empty_n,
        if_read => compute_add_U0_ap_ready);

    start_for_store_reOg_U : component start_for_store_reOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_result_U0_din,
        if_full_n => start_for_store_result_U0_full_n,
        if_write => compute_add_U0_start_write,
        if_dout => start_for_store_result_U0_dout,
        if_empty_n => start_for_store_result_U0_empty_n,
        if_read => store_result_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    compute_add_U0_ap_continue <= ap_const_logic_1;
    compute_add_U0_ap_start <= start_for_compute_add_U0_empty_n;
    in1_TREADY <= load_input20_U0_in1_TREADY;
    in2_TREADY <= load_input_U0_in2_TREADY;
    krnl_vadd_entry42_U0_ap_continue <= ap_const_logic_1;
    krnl_vadd_entry42_U0_ap_start <= ap_const_logic_1;
    load_input20_U0_ap_continue <= ap_const_logic_1;
    load_input20_U0_ap_start <= ap_const_logic_1;
    load_input20_U0_start_full_n <= ap_const_logic_1;
    load_input20_U0_start_write <= ap_const_logic_0;
    load_input_U0_ap_continue <= ap_const_logic_1;
    load_input_U0_ap_start <= ap_const_logic_1;
    load_input_U0_start_full_n <= ap_const_logic_1;
    load_input_U0_start_write <= ap_const_logic_0;
    out_r_TDATA <= store_result_U0_out_r_TDATA;
    out_r_TDEST <= store_result_U0_out_r_TDEST;
    out_r_TID <= store_result_U0_out_r_TID;
    out_r_TKEEP <= store_result_U0_out_r_TKEEP;
    out_r_TLAST <= store_result_U0_out_r_TLAST;
    out_r_TSTRB <= store_result_U0_out_r_TSTRB;
    out_r_TUSER <= store_result_U0_out_r_TUSER;
    out_r_TVALID <= store_result_U0_out_r_TVALID;
    start_for_compute_add_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_store_result_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_result_U0_ap_continue <= ap_const_logic_1;
    store_result_U0_ap_start <= start_for_store_result_U0_empty_n;
    store_result_U0_start_full_n <= ap_const_logic_1;
    store_result_U0_start_write <= ap_const_logic_0;
end behav;
