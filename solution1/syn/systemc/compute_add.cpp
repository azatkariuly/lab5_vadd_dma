// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "compute_add.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic compute_add::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic compute_add::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> compute_add::ap_ST_fsm_state1 = "1";
const sc_lv<3> compute_add::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> compute_add::ap_ST_fsm_state14 = "100";
const bool compute_add::ap_const_boolean_1 = true;
const sc_lv<32> compute_add::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> compute_add::ap_const_lv32_1 = "1";
const bool compute_add::ap_const_boolean_0 = false;
const sc_lv<1> compute_add::ap_const_lv1_1 = "1";
const sc_lv<1> compute_add::ap_const_lv1_0 = "0";
const sc_lv<31> compute_add::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<31> compute_add::ap_const_lv31_1 = "1";
const sc_lv<32> compute_add::ap_const_lv32_2 = "10";

compute_add::compute_add(sc_module_name name) : sc_module(name), mVcdFile(0) {
    krnl_vadd_fadd_32bkb_U27 = new krnl_vadd_fadd_32bkb<1,5,32,32,32>("krnl_vadd_fadd_32bkb_U27");
    krnl_vadd_fadd_32bkb_U27->clk(ap_clk);
    krnl_vadd_fadd_32bkb_U27->reset(ap_rst);
    krnl_vadd_fadd_32bkb_U27->din0(tmp_2_i_i_reg_224);
    krnl_vadd_fadd_32bkb_U27->din1(tmp_1_reg_219_pp0_iter5_reg);
    krnl_vadd_fadd_32bkb_U27->ce(grp_fu_172_ce);
    krnl_vadd_fadd_32bkb_U27->dout(grp_fu_172_p2);
    krnl_vadd_fmul_32cud_U28 = new krnl_vadd_fmul_32cud<1,4,32,32,32>("krnl_vadd_fmul_32cud_U28");
    krnl_vadd_fmul_32cud_U28->clk(ap_clk);
    krnl_vadd_fmul_32cud_U28->reset(ap_rst);
    krnl_vadd_fmul_32cud_U28->din0(tmp_reg_214);
    krnl_vadd_fmul_32cud_U28->din1(a_read_reg_195);
    krnl_vadd_fmul_32cud_U28->ce(grp_fu_176_ce);
    krnl_vadd_fmul_32cud_U28->dout(grp_fu_176_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_empty_n );

    SC_METHOD(thread_a_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_empty_n );
    sensitive << ( size_empty_n );
    sensitive << ( size_out_full_n );

    SC_METHOD(thread_add_ln25_fu_189_p2);
    sensitive << ( i_0_i_i_reg_161 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in1_stream_V_empty_n );
    sensitive << ( in2_stream_V_empty_n );
    sensitive << ( out_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_205 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( icmp_ln25_reg_205_pp0_iter10_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in1_stream_V_empty_n );
    sensitive << ( in2_stream_V_empty_n );
    sensitive << ( out_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_205 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( icmp_ln25_reg_205_pp0_iter10_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in1_stream_V_empty_n );
    sensitive << ( in2_stream_V_empty_n );
    sensitive << ( out_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_205 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( icmp_ln25_reg_205_pp0_iter10_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( a_empty_n );
    sensitive << ( size_empty_n );
    sensitive << ( size_out_full_n );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter8);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter9);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter10);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter11);
    sensitive << ( out_stream_V_full_n );
    sensitive << ( icmp_ln25_reg_205_pp0_iter10_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( in1_stream_V_empty_n );
    sensitive << ( in2_stream_V_empty_n );
    sensitive << ( icmp_ln25_reg_205 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter7);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln25_fu_184_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_grp_fu_172_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_176_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_0_i_i_cast_fu_180_p1);
    sensitive << ( i_0_i_i_reg_161 );

    SC_METHOD(thread_icmp_ln25_fu_184_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( size_read_reg_200 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_0_i_i_cast_fu_180_p1 );

    SC_METHOD(thread_in1_stream_V_blk_n);
    sensitive << ( in1_stream_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln25_reg_205 );

    SC_METHOD(thread_in1_stream_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_205 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in2_stream_V_blk_n);
    sensitive << ( in2_stream_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln25_reg_205 );

    SC_METHOD(thread_in2_stream_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln25_reg_205 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_out_stream_V_blk_n);
    sensitive << ( out_stream_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( icmp_ln25_reg_205_pp0_iter10_reg );

    SC_METHOD(thread_out_stream_V_din);
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( icmp_ln25_reg_205_pp0_iter10_reg );
    sensitive << ( tmp_2_reg_229 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_stream_V_write);
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( icmp_ln25_reg_205_pp0_iter10_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_size_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( size_empty_n );

    SC_METHOD(thread_size_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( size_out_full_n );

    SC_METHOD(thread_size_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_empty_n );
    sensitive << ( size_dout );
    sensitive << ( size_empty_n );
    sensitive << ( size_out_full_n );

    SC_METHOD(thread_size_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_empty_n );
    sensitive << ( size_empty_n );
    sensitive << ( size_out_full_n );

    SC_METHOD(thread_size_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_empty_n );
    sensitive << ( size_empty_n );
    sensitive << ( size_out_full_n );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_empty_n );
    sensitive << ( size_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( icmp_ln25_fu_184_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter10 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter11 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter10 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "compute_add_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, a_dout, "(port)a_dout");
    sc_trace(mVcdFile, a_empty_n, "(port)a_empty_n");
    sc_trace(mVcdFile, a_read, "(port)a_read");
    sc_trace(mVcdFile, size_dout, "(port)size_dout");
    sc_trace(mVcdFile, size_empty_n, "(port)size_empty_n");
    sc_trace(mVcdFile, size_read, "(port)size_read");
    sc_trace(mVcdFile, size_out_din, "(port)size_out_din");
    sc_trace(mVcdFile, size_out_full_n, "(port)size_out_full_n");
    sc_trace(mVcdFile, size_out_write, "(port)size_out_write");
    sc_trace(mVcdFile, in1_stream_V_dout, "(port)in1_stream_V_dout");
    sc_trace(mVcdFile, in1_stream_V_empty_n, "(port)in1_stream_V_empty_n");
    sc_trace(mVcdFile, in1_stream_V_read, "(port)in1_stream_V_read");
    sc_trace(mVcdFile, in2_stream_V_dout, "(port)in2_stream_V_dout");
    sc_trace(mVcdFile, in2_stream_V_empty_n, "(port)in2_stream_V_empty_n");
    sc_trace(mVcdFile, in2_stream_V_read, "(port)in2_stream_V_read");
    sc_trace(mVcdFile, out_stream_V_din, "(port)out_stream_V_din");
    sc_trace(mVcdFile, out_stream_V_full_n, "(port)out_stream_V_full_n");
    sc_trace(mVcdFile, out_stream_V_write, "(port)out_stream_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, a_blk_n, "a_blk_n");
    sc_trace(mVcdFile, size_blk_n, "size_blk_n");
    sc_trace(mVcdFile, size_out_blk_n, "size_out_blk_n");
    sc_trace(mVcdFile, in1_stream_V_blk_n, "in1_stream_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln25_reg_205, "icmp_ln25_reg_205");
    sc_trace(mVcdFile, in2_stream_V_blk_n, "in2_stream_V_blk_n");
    sc_trace(mVcdFile, out_stream_V_blk_n, "out_stream_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter11, "ap_enable_reg_pp0_iter11");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter10_reg, "icmp_ln25_reg_205_pp0_iter10_reg");
    sc_trace(mVcdFile, i_0_i_i_reg_161, "i_0_i_i_reg_161");
    sc_trace(mVcdFile, a_read_reg_195, "a_read_reg_195");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, size_read_reg_200, "size_read_reg_200");
    sc_trace(mVcdFile, icmp_ln25_fu_184_p2, "icmp_ln25_fu_184_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter7, "ap_block_state9_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter8, "ap_block_state10_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter9, "ap_block_state11_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter10, "ap_block_state12_pp0_stage0_iter10");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter11, "ap_block_state13_pp0_stage0_iter11");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter1_reg, "icmp_ln25_reg_205_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter2_reg, "icmp_ln25_reg_205_pp0_iter2_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter3_reg, "icmp_ln25_reg_205_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter4_reg, "icmp_ln25_reg_205_pp0_iter4_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter5_reg, "icmp_ln25_reg_205_pp0_iter5_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter6_reg, "icmp_ln25_reg_205_pp0_iter6_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter7_reg, "icmp_ln25_reg_205_pp0_iter7_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter8_reg, "icmp_ln25_reg_205_pp0_iter8_reg");
    sc_trace(mVcdFile, icmp_ln25_reg_205_pp0_iter9_reg, "icmp_ln25_reg_205_pp0_iter9_reg");
    sc_trace(mVcdFile, add_ln25_fu_189_p2, "add_ln25_fu_189_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_reg_214, "tmp_reg_214");
    sc_trace(mVcdFile, tmp_1_reg_219, "tmp_1_reg_219");
    sc_trace(mVcdFile, tmp_1_reg_219_pp0_iter2_reg, "tmp_1_reg_219_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_1_reg_219_pp0_iter3_reg, "tmp_1_reg_219_pp0_iter3_reg");
    sc_trace(mVcdFile, tmp_1_reg_219_pp0_iter4_reg, "tmp_1_reg_219_pp0_iter4_reg");
    sc_trace(mVcdFile, tmp_1_reg_219_pp0_iter5_reg, "tmp_1_reg_219_pp0_iter5_reg");
    sc_trace(mVcdFile, grp_fu_176_p2, "grp_fu_176_p2");
    sc_trace(mVcdFile, tmp_2_i_i_reg_224, "tmp_2_i_i_reg_224");
    sc_trace(mVcdFile, grp_fu_172_p2, "grp_fu_172_p2");
    sc_trace(mVcdFile, tmp_2_reg_229, "tmp_2_reg_229");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter10, "ap_enable_reg_pp0_iter10");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, i_0_i_i_cast_fu_180_p1, "i_0_i_i_cast_fu_180_p1");
    sc_trace(mVcdFile, grp_fu_172_ce, "grp_fu_172_ce");
    sc_trace(mVcdFile, grp_fu_176_ce, "grp_fu_176_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

compute_add::~compute_add() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete krnl_vadd_fadd_32bkb_U27;
    delete krnl_vadd_fmul_32cud_U28;
}

void compute_add::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter10 = ap_enable_reg_pp0_iter9.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter11 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter11 = ap_enable_reg_pp0_iter10.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read())))) {
            ap_enable_reg_pp0_iter11 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_fu_184_p2.read()))) {
        i_0_i_i_reg_161 = add_ln25_fu_189_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read())))) {
        i_0_i_i_reg_161 = ap_const_lv31_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read())))) {
        a_read_reg_195 = a_dout.read();
        size_read_reg_200 = size_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln25_reg_205 = icmp_ln25_fu_184_p2.read();
        icmp_ln25_reg_205_pp0_iter1_reg = icmp_ln25_reg_205.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln25_reg_205_pp0_iter10_reg = icmp_ln25_reg_205_pp0_iter9_reg.read();
        icmp_ln25_reg_205_pp0_iter2_reg = icmp_ln25_reg_205_pp0_iter1_reg.read();
        icmp_ln25_reg_205_pp0_iter3_reg = icmp_ln25_reg_205_pp0_iter2_reg.read();
        icmp_ln25_reg_205_pp0_iter4_reg = icmp_ln25_reg_205_pp0_iter3_reg.read();
        icmp_ln25_reg_205_pp0_iter5_reg = icmp_ln25_reg_205_pp0_iter4_reg.read();
        icmp_ln25_reg_205_pp0_iter6_reg = icmp_ln25_reg_205_pp0_iter5_reg.read();
        icmp_ln25_reg_205_pp0_iter7_reg = icmp_ln25_reg_205_pp0_iter6_reg.read();
        icmp_ln25_reg_205_pp0_iter8_reg = icmp_ln25_reg_205_pp0_iter7_reg.read();
        icmp_ln25_reg_205_pp0_iter9_reg = icmp_ln25_reg_205_pp0_iter8_reg.read();
        tmp_1_reg_219_pp0_iter2_reg = tmp_1_reg_219.read();
        tmp_1_reg_219_pp0_iter3_reg = tmp_1_reg_219_pp0_iter2_reg.read();
        tmp_1_reg_219_pp0_iter4_reg = tmp_1_reg_219_pp0_iter3_reg.read();
        tmp_1_reg_219_pp0_iter5_reg = tmp_1_reg_219_pp0_iter4_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_219 = in2_stream_V_dout.read();
        tmp_reg_214 = in1_stream_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_reg_205_pp0_iter4_reg.read()))) {
        tmp_2_i_i_reg_224 = grp_fu_176_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_reg_205_pp0_iter9_reg.read()))) {
        tmp_2_reg_229 = grp_fu_172_p2.read();
    }
}

void compute_add::thread_a_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        a_blk_n = a_empty_n.read();
    } else {
        a_blk_n = ap_const_logic_1;
    }
}

void compute_add::thread_a_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read())))) {
        a_read = ap_const_logic_1;
    } else {
        a_read = ap_const_logic_0;
    }
}

void compute_add::thread_add_ln25_fu_189_p2() {
    add_ln25_fu_189_p2 = (!i_0_i_i_reg_161.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_i_i_reg_161.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void compute_add::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void compute_add::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void compute_add::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[2];
}

void compute_add::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in1_stream_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in2_stream_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_reg_205_pp0_iter10_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_full_n.read())));
}

void compute_add::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in1_stream_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in2_stream_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_reg_205_pp0_iter10_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_full_n.read())));
}

void compute_add::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in1_stream_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in2_stream_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_reg_205_pp0_iter10_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_full_n.read())));
}

void compute_add::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()));
}

void compute_add::thread_ap_block_state10_pp0_stage0_iter8() {
    ap_block_state10_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state11_pp0_stage0_iter9() {
    ap_block_state11_pp0_stage0_iter9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state12_pp0_stage0_iter10() {
    ap_block_state12_pp0_stage0_iter10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state13_pp0_stage0_iter11() {
    ap_block_state13_pp0_stage0_iter11 = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_reg_205_pp0_iter10_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_full_n.read()));
}

void compute_add::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_stream_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in2_stream_V_empty_n.read())));
}

void compute_add::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_block_state9_pp0_stage0_iter7() {
    ap_block_state9_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compute_add::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln25_fu_184_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void compute_add::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void compute_add::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void compute_add::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void compute_add::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void compute_add::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void compute_add::thread_grp_fu_172_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_172_ce = ap_const_logic_1;
    } else {
        grp_fu_172_ce = ap_const_logic_0;
    }
}

void compute_add::thread_grp_fu_176_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_176_ce = ap_const_logic_1;
    } else {
        grp_fu_176_ce = ap_const_logic_0;
    }
}

void compute_add::thread_i_0_i_i_cast_fu_180_p1() {
    i_0_i_i_cast_fu_180_p1 = esl_zext<32,31>(i_0_i_i_reg_161.read());
}

void compute_add::thread_icmp_ln25_fu_184_p2() {
    icmp_ln25_fu_184_p2 = (!i_0_i_i_cast_fu_180_p1.read().is_01() || !size_read_reg_200.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_0_i_i_cast_fu_180_p1.read()) < sc_bigint<32>(size_read_reg_200.read()));
}

void compute_add::thread_in1_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1))) {
        in1_stream_V_blk_n = in1_stream_V_empty_n.read();
    } else {
        in1_stream_V_blk_n = ap_const_logic_1;
    }
}

void compute_add::thread_in1_stream_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in1_stream_V_read = ap_const_logic_1;
    } else {
        in1_stream_V_read = ap_const_logic_0;
    }
}

void compute_add::thread_in2_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1))) {
        in2_stream_V_blk_n = in2_stream_V_empty_n.read();
    } else {
        in2_stream_V_blk_n = ap_const_logic_1;
    }
}

void compute_add::thread_in2_stream_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_205.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in2_stream_V_read = ap_const_logic_1;
    } else {
        in2_stream_V_read = ap_const_logic_0;
    }
}

void compute_add::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void compute_add::thread_out_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_reg_205_pp0_iter10_reg.read()))) {
        out_stream_V_blk_n = out_stream_V_full_n.read();
    } else {
        out_stream_V_blk_n = ap_const_logic_1;
    }
}

void compute_add::thread_out_stream_V_din() {
    out_stream_V_din = tmp_2_reg_229.read();
}

void compute_add::thread_out_stream_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_reg_205_pp0_iter10_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_write = ap_const_logic_1;
    } else {
        out_stream_V_write = ap_const_logic_0;
    }
}

void compute_add::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void compute_add::thread_size_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        size_blk_n = size_empty_n.read();
    } else {
        size_blk_n = ap_const_logic_1;
    }
}

void compute_add::thread_size_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        size_out_blk_n = size_out_full_n.read();
    } else {
        size_out_blk_n = ap_const_logic_1;
    }
}

void compute_add::thread_size_out_din() {
    size_out_din = size_dout.read();
}

void compute_add::thread_size_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read())))) {
        size_out_write = ap_const_logic_1;
    } else {
        size_out_write = ap_const_logic_0;
    }
}

void compute_add::thread_size_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read())))) {
        size_read = ap_const_logic_1;
    } else {
        size_read = ap_const_logic_0;
    }
}

void compute_add::thread_start_out() {
    start_out = real_start.read();
}

void compute_add::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void compute_add::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, a_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter10.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln25_fu_184_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter11.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter10.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln25_fu_184_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

