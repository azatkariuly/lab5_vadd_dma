// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _compute_add_HH_
#define _compute_add_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "krnl_vadd_fadd_32bkb.h"
#include "krnl_vadd_fmul_32cud.h"

namespace ap_rtl {

struct compute_add : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > a_dout;
    sc_in< sc_logic > a_empty_n;
    sc_out< sc_logic > a_read;
    sc_in< sc_lv<32> > size_dout;
    sc_in< sc_logic > size_empty_n;
    sc_out< sc_logic > size_read;
    sc_out< sc_lv<32> > size_out_din;
    sc_in< sc_logic > size_out_full_n;
    sc_out< sc_logic > size_out_write;
    sc_in< sc_lv<32> > in1_stream_V_dout;
    sc_in< sc_logic > in1_stream_V_empty_n;
    sc_out< sc_logic > in1_stream_V_read;
    sc_in< sc_lv<32> > in2_stream_V_dout;
    sc_in< sc_logic > in2_stream_V_empty_n;
    sc_out< sc_logic > in2_stream_V_read;
    sc_out< sc_lv<32> > out_stream_V_din;
    sc_in< sc_logic > out_stream_V_full_n;
    sc_out< sc_logic > out_stream_V_write;


    // Module declarations
    compute_add(sc_module_name name);
    SC_HAS_PROCESS(compute_add);

    ~compute_add();

    sc_trace_file* mVcdFile;

    krnl_vadd_fadd_32bkb<1,5,32,32,32>* krnl_vadd_fadd_32bkb_U27;
    krnl_vadd_fmul_32cud<1,4,32,32,32>* krnl_vadd_fmul_32cud_U28;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > a_blk_n;
    sc_signal< sc_logic > size_blk_n;
    sc_signal< sc_logic > size_out_blk_n;
    sc_signal< sc_logic > in1_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205;
    sc_signal< sc_logic > in2_stream_V_blk_n;
    sc_signal< sc_logic > out_stream_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter11;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter10_reg;
    sc_signal< sc_lv<31> > i_0_i_i_reg_161;
    sc_signal< sc_lv<32> > a_read_reg_195;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > size_read_reg_200;
    sc_signal< sc_lv<1> > icmp_ln25_fu_184_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter11;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter6_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter7_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter8_reg;
    sc_signal< sc_lv<1> > icmp_ln25_reg_205_pp0_iter9_reg;
    sc_signal< sc_lv<31> > add_ln25_fu_189_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_reg_214;
    sc_signal< sc_lv<32> > tmp_1_reg_219;
    sc_signal< sc_lv<32> > tmp_1_reg_219_pp0_iter2_reg;
    sc_signal< sc_lv<32> > tmp_1_reg_219_pp0_iter3_reg;
    sc_signal< sc_lv<32> > tmp_1_reg_219_pp0_iter4_reg;
    sc_signal< sc_lv<32> > tmp_1_reg_219_pp0_iter5_reg;
    sc_signal< sc_lv<32> > grp_fu_176_p2;
    sc_signal< sc_lv<32> > tmp_2_i_i_reg_224;
    sc_signal< sc_lv<32> > grp_fu_172_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_229;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > i_0_i_i_cast_fu_180_p1;
    sc_signal< sc_logic > grp_fu_172_ce;
    sc_signal< sc_logic > grp_fu_176_ce;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state14;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_blk_n();
    void thread_a_read();
    void thread_add_ln25_fu_189_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state12_pp0_stage0_iter10();
    void thread_ap_block_state13_pp0_stage0_iter11();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_grp_fu_172_ce();
    void thread_grp_fu_176_ce();
    void thread_i_0_i_i_cast_fu_180_p1();
    void thread_icmp_ln25_fu_184_p2();
    void thread_in1_stream_V_blk_n();
    void thread_in1_stream_V_read();
    void thread_in2_stream_V_blk_n();
    void thread_in2_stream_V_read();
    void thread_internal_ap_ready();
    void thread_out_stream_V_blk_n();
    void thread_out_stream_V_din();
    void thread_out_stream_V_write();
    void thread_real_start();
    void thread_size_blk_n();
    void thread_size_out_blk_n();
    void thread_size_out_din();
    void thread_size_out_write();
    void thread_size_read();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
