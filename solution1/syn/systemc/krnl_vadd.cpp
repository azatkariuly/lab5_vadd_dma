// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "krnl_vadd.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int krnl_vadd::C_S_AXI_DATA_WIDTH = "100000";
const int krnl_vadd::C_S_AXI_WSTRB_WIDTH = "100";
const int krnl_vadd::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic krnl_vadd::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> krnl_vadd::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> krnl_vadd::ap_const_lv4_0 = "0000";
const sc_lv<1> krnl_vadd::ap_const_lv1_0 = "0";
const sc_lv<5> krnl_vadd::ap_const_lv5_0 = "00000";
const sc_logic krnl_vadd::ap_const_logic_0 = sc_dt::Log_0;

krnl_vadd::krnl_vadd(sc_module_name name) : sc_module(name), mVcdFile(0) {
    krnl_vadd_AXILiteS_s_axi_U = new krnl_vadd_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("krnl_vadd_AXILiteS_s_axi_U");
    krnl_vadd_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    krnl_vadd_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    krnl_vadd_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    krnl_vadd_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    krnl_vadd_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    krnl_vadd_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    krnl_vadd_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    krnl_vadd_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    krnl_vadd_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    krnl_vadd_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    krnl_vadd_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    krnl_vadd_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    krnl_vadd_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    krnl_vadd_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    krnl_vadd_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    krnl_vadd_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    krnl_vadd_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    krnl_vadd_AXILiteS_s_axi_U->ACLK(ap_clk);
    krnl_vadd_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    krnl_vadd_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    krnl_vadd_AXILiteS_s_axi_U->a(a);
    krnl_vadd_AXILiteS_s_axi_U->size(size);
    krnl_vadd_entry42_U0 = new krnl_vadd_entry42("krnl_vadd_entry42_U0");
    krnl_vadd_entry42_U0->ap_clk(ap_clk);
    krnl_vadd_entry42_U0->ap_rst(ap_rst_n_inv);
    krnl_vadd_entry42_U0->ap_start(krnl_vadd_entry42_U0_ap_start);
    krnl_vadd_entry42_U0->start_full_n(start_for_compute_add_U0_full_n);
    krnl_vadd_entry42_U0->ap_done(krnl_vadd_entry42_U0_ap_done);
    krnl_vadd_entry42_U0->ap_continue(krnl_vadd_entry42_U0_ap_continue);
    krnl_vadd_entry42_U0->ap_idle(krnl_vadd_entry42_U0_ap_idle);
    krnl_vadd_entry42_U0->ap_ready(krnl_vadd_entry42_U0_ap_ready);
    krnl_vadd_entry42_U0->start_out(krnl_vadd_entry42_U0_start_out);
    krnl_vadd_entry42_U0->start_write(krnl_vadd_entry42_U0_start_write);
    krnl_vadd_entry42_U0->a(a);
    krnl_vadd_entry42_U0->size(size);
    krnl_vadd_entry42_U0->a_out_din(krnl_vadd_entry42_U0_a_out_din);
    krnl_vadd_entry42_U0->a_out_full_n(a_c_full_n);
    krnl_vadd_entry42_U0->a_out_write(krnl_vadd_entry42_U0_a_out_write);
    krnl_vadd_entry42_U0->size_out_din(krnl_vadd_entry42_U0_size_out_din);
    krnl_vadd_entry42_U0->size_out_full_n(size_c_full_n);
    krnl_vadd_entry42_U0->size_out_write(krnl_vadd_entry42_U0_size_out_write);
    krnl_vadd_entry42_U0->size_out1_din(krnl_vadd_entry42_U0_size_out1_din);
    krnl_vadd_entry42_U0->size_out1_full_n(size_c9_full_n);
    krnl_vadd_entry42_U0->size_out1_write(krnl_vadd_entry42_U0_size_out1_write);
    load_input20_U0 = new load_input20("load_input20_U0");
    load_input20_U0->ap_clk(ap_clk);
    load_input20_U0->ap_rst(ap_rst_n_inv);
    load_input20_U0->ap_start(load_input20_U0_ap_start);
    load_input20_U0->ap_done(load_input20_U0_ap_done);
    load_input20_U0->ap_continue(load_input20_U0_ap_continue);
    load_input20_U0->ap_idle(load_input20_U0_ap_idle);
    load_input20_U0->ap_ready(load_input20_U0_ap_ready);
    load_input20_U0->in1_TDATA(in1_TDATA);
    load_input20_U0->in1_TVALID(in1_TVALID);
    load_input20_U0->in1_TREADY(load_input20_U0_in1_TREADY);
    load_input20_U0->in1_TKEEP(in1_TKEEP);
    load_input20_U0->in1_TSTRB(in1_TSTRB);
    load_input20_U0->in1_TUSER(in1_TUSER);
    load_input20_U0->in1_TLAST(in1_TLAST);
    load_input20_U0->in1_TID(in1_TID);
    load_input20_U0->in1_TDEST(in1_TDEST);
    load_input20_U0->size_dout(size_c_dout);
    load_input20_U0->size_empty_n(size_c_empty_n);
    load_input20_U0->size_read(load_input20_U0_size_read);
    load_input20_U0->size_out_din(load_input20_U0_size_out_din);
    load_input20_U0->size_out_full_n(size_c10_full_n);
    load_input20_U0->size_out_write(load_input20_U0_size_out_write);
    load_input20_U0->in1_stream_V_din(load_input20_U0_in1_stream_V_din);
    load_input20_U0->in1_stream_V_full_n(in1_stream_V_full_n);
    load_input20_U0->in1_stream_V_write(load_input20_U0_in1_stream_V_write);
    load_input_U0 = new load_input("load_input_U0");
    load_input_U0->ap_clk(ap_clk);
    load_input_U0->ap_rst(ap_rst_n_inv);
    load_input_U0->ap_start(load_input_U0_ap_start);
    load_input_U0->ap_done(load_input_U0_ap_done);
    load_input_U0->ap_continue(load_input_U0_ap_continue);
    load_input_U0->ap_idle(load_input_U0_ap_idle);
    load_input_U0->ap_ready(load_input_U0_ap_ready);
    load_input_U0->in2_TDATA(in2_TDATA);
    load_input_U0->in2_TVALID(in2_TVALID);
    load_input_U0->in2_TREADY(load_input_U0_in2_TREADY);
    load_input_U0->in2_TKEEP(in2_TKEEP);
    load_input_U0->in2_TSTRB(in2_TSTRB);
    load_input_U0->in2_TUSER(in2_TUSER);
    load_input_U0->in2_TLAST(in2_TLAST);
    load_input_U0->in2_TID(in2_TID);
    load_input_U0->in2_TDEST(in2_TDEST);
    load_input_U0->size_dout(size_c9_dout);
    load_input_U0->size_empty_n(size_c9_empty_n);
    load_input_U0->size_read(load_input_U0_size_read);
    load_input_U0->in2_stream_V_din(load_input_U0_in2_stream_V_din);
    load_input_U0->in2_stream_V_full_n(in2_stream_V_full_n);
    load_input_U0->in2_stream_V_write(load_input_U0_in2_stream_V_write);
    compute_add_U0 = new compute_add("compute_add_U0");
    compute_add_U0->ap_clk(ap_clk);
    compute_add_U0->ap_rst(ap_rst_n_inv);
    compute_add_U0->ap_start(compute_add_U0_ap_start);
    compute_add_U0->start_full_n(start_for_store_result_U0_full_n);
    compute_add_U0->ap_done(compute_add_U0_ap_done);
    compute_add_U0->ap_continue(compute_add_U0_ap_continue);
    compute_add_U0->ap_idle(compute_add_U0_ap_idle);
    compute_add_U0->ap_ready(compute_add_U0_ap_ready);
    compute_add_U0->start_out(compute_add_U0_start_out);
    compute_add_U0->start_write(compute_add_U0_start_write);
    compute_add_U0->a_dout(a_c_dout);
    compute_add_U0->a_empty_n(a_c_empty_n);
    compute_add_U0->a_read(compute_add_U0_a_read);
    compute_add_U0->size_dout(size_c10_dout);
    compute_add_U0->size_empty_n(size_c10_empty_n);
    compute_add_U0->size_read(compute_add_U0_size_read);
    compute_add_U0->size_out_din(compute_add_U0_size_out_din);
    compute_add_U0->size_out_full_n(size_c11_full_n);
    compute_add_U0->size_out_write(compute_add_U0_size_out_write);
    compute_add_U0->in1_stream_V_dout(in1_stream_V_dout);
    compute_add_U0->in1_stream_V_empty_n(in1_stream_V_empty_n);
    compute_add_U0->in1_stream_V_read(compute_add_U0_in1_stream_V_read);
    compute_add_U0->in2_stream_V_dout(in2_stream_V_dout);
    compute_add_U0->in2_stream_V_empty_n(in2_stream_V_empty_n);
    compute_add_U0->in2_stream_V_read(compute_add_U0_in2_stream_V_read);
    compute_add_U0->out_stream_V_din(compute_add_U0_out_stream_V_din);
    compute_add_U0->out_stream_V_full_n(out_stream_V_full_n);
    compute_add_U0->out_stream_V_write(compute_add_U0_out_stream_V_write);
    store_result_U0 = new store_result("store_result_U0");
    store_result_U0->ap_clk(ap_clk);
    store_result_U0->ap_rst(ap_rst_n_inv);
    store_result_U0->ap_start(store_result_U0_ap_start);
    store_result_U0->ap_done(store_result_U0_ap_done);
    store_result_U0->ap_continue(store_result_U0_ap_continue);
    store_result_U0->ap_idle(store_result_U0_ap_idle);
    store_result_U0->ap_ready(store_result_U0_ap_ready);
    store_result_U0->out_r_TDATA(store_result_U0_out_r_TDATA);
    store_result_U0->out_r_TVALID(store_result_U0_out_r_TVALID);
    store_result_U0->out_r_TREADY(out_r_TREADY);
    store_result_U0->out_r_TKEEP(store_result_U0_out_r_TKEEP);
    store_result_U0->out_r_TSTRB(store_result_U0_out_r_TSTRB);
    store_result_U0->out_r_TUSER(store_result_U0_out_r_TUSER);
    store_result_U0->out_r_TLAST(store_result_U0_out_r_TLAST);
    store_result_U0->out_r_TID(store_result_U0_out_r_TID);
    store_result_U0->out_r_TDEST(store_result_U0_out_r_TDEST);
    store_result_U0->size_dout(size_c11_dout);
    store_result_U0->size_empty_n(size_c11_empty_n);
    store_result_U0->size_read(store_result_U0_size_read);
    store_result_U0->out_stream_V_dout(out_stream_V_dout);
    store_result_U0->out_stream_V_empty_n(out_stream_V_empty_n);
    store_result_U0->out_stream_V_read(store_result_U0_out_stream_V_read);
    a_c_U = new fifo_w32_d3_A("a_c_U");
    a_c_U->clk(ap_clk);
    a_c_U->reset(ap_rst_n_inv);
    a_c_U->if_read_ce(ap_var_for_const0);
    a_c_U->if_write_ce(ap_var_for_const0);
    a_c_U->if_din(krnl_vadd_entry42_U0_a_out_din);
    a_c_U->if_full_n(a_c_full_n);
    a_c_U->if_write(krnl_vadd_entry42_U0_a_out_write);
    a_c_U->if_dout(a_c_dout);
    a_c_U->if_empty_n(a_c_empty_n);
    a_c_U->if_read(compute_add_U0_a_read);
    size_c_U = new fifo_w32_d2_A("size_c_U");
    size_c_U->clk(ap_clk);
    size_c_U->reset(ap_rst_n_inv);
    size_c_U->if_read_ce(ap_var_for_const0);
    size_c_U->if_write_ce(ap_var_for_const0);
    size_c_U->if_din(krnl_vadd_entry42_U0_size_out_din);
    size_c_U->if_full_n(size_c_full_n);
    size_c_U->if_write(krnl_vadd_entry42_U0_size_out_write);
    size_c_U->if_dout(size_c_dout);
    size_c_U->if_empty_n(size_c_empty_n);
    size_c_U->if_read(load_input20_U0_size_read);
    size_c9_U = new fifo_w32_d2_A("size_c9_U");
    size_c9_U->clk(ap_clk);
    size_c9_U->reset(ap_rst_n_inv);
    size_c9_U->if_read_ce(ap_var_for_const0);
    size_c9_U->if_write_ce(ap_var_for_const0);
    size_c9_U->if_din(krnl_vadd_entry42_U0_size_out1_din);
    size_c9_U->if_full_n(size_c9_full_n);
    size_c9_U->if_write(krnl_vadd_entry42_U0_size_out1_write);
    size_c9_U->if_dout(size_c9_dout);
    size_c9_U->if_empty_n(size_c9_empty_n);
    size_c9_U->if_read(load_input_U0_size_read);
    size_c10_U = new fifo_w32_d2_A("size_c10_U");
    size_c10_U->clk(ap_clk);
    size_c10_U->reset(ap_rst_n_inv);
    size_c10_U->if_read_ce(ap_var_for_const0);
    size_c10_U->if_write_ce(ap_var_for_const0);
    size_c10_U->if_din(load_input20_U0_size_out_din);
    size_c10_U->if_full_n(size_c10_full_n);
    size_c10_U->if_write(load_input20_U0_size_out_write);
    size_c10_U->if_dout(size_c10_dout);
    size_c10_U->if_empty_n(size_c10_empty_n);
    size_c10_U->if_read(compute_add_U0_size_read);
    in1_stream_V_U = new fifo_w32_d2_A("in1_stream_V_U");
    in1_stream_V_U->clk(ap_clk);
    in1_stream_V_U->reset(ap_rst_n_inv);
    in1_stream_V_U->if_read_ce(ap_var_for_const0);
    in1_stream_V_U->if_write_ce(ap_var_for_const0);
    in1_stream_V_U->if_din(load_input20_U0_in1_stream_V_din);
    in1_stream_V_U->if_full_n(in1_stream_V_full_n);
    in1_stream_V_U->if_write(load_input20_U0_in1_stream_V_write);
    in1_stream_V_U->if_dout(in1_stream_V_dout);
    in1_stream_V_U->if_empty_n(in1_stream_V_empty_n);
    in1_stream_V_U->if_read(compute_add_U0_in1_stream_V_read);
    in2_stream_V_U = new fifo_w32_d2_A("in2_stream_V_U");
    in2_stream_V_U->clk(ap_clk);
    in2_stream_V_U->reset(ap_rst_n_inv);
    in2_stream_V_U->if_read_ce(ap_var_for_const0);
    in2_stream_V_U->if_write_ce(ap_var_for_const0);
    in2_stream_V_U->if_din(load_input_U0_in2_stream_V_din);
    in2_stream_V_U->if_full_n(in2_stream_V_full_n);
    in2_stream_V_U->if_write(load_input_U0_in2_stream_V_write);
    in2_stream_V_U->if_dout(in2_stream_V_dout);
    in2_stream_V_U->if_empty_n(in2_stream_V_empty_n);
    in2_stream_V_U->if_read(compute_add_U0_in2_stream_V_read);
    size_c11_U = new fifo_w32_d2_A("size_c11_U");
    size_c11_U->clk(ap_clk);
    size_c11_U->reset(ap_rst_n_inv);
    size_c11_U->if_read_ce(ap_var_for_const0);
    size_c11_U->if_write_ce(ap_var_for_const0);
    size_c11_U->if_din(compute_add_U0_size_out_din);
    size_c11_U->if_full_n(size_c11_full_n);
    size_c11_U->if_write(compute_add_U0_size_out_write);
    size_c11_U->if_dout(size_c11_dout);
    size_c11_U->if_empty_n(size_c11_empty_n);
    size_c11_U->if_read(store_result_U0_size_read);
    out_stream_V_U = new fifo_w32_d2_A("out_stream_V_U");
    out_stream_V_U->clk(ap_clk);
    out_stream_V_U->reset(ap_rst_n_inv);
    out_stream_V_U->if_read_ce(ap_var_for_const0);
    out_stream_V_U->if_write_ce(ap_var_for_const0);
    out_stream_V_U->if_din(compute_add_U0_out_stream_V_din);
    out_stream_V_U->if_full_n(out_stream_V_full_n);
    out_stream_V_U->if_write(compute_add_U0_out_stream_V_write);
    out_stream_V_U->if_dout(out_stream_V_dout);
    out_stream_V_U->if_empty_n(out_stream_V_empty_n);
    out_stream_V_U->if_read(store_result_U0_out_stream_V_read);
    start_for_computedEe_U = new start_for_computedEe("start_for_computedEe_U");
    start_for_computedEe_U->clk(ap_clk);
    start_for_computedEe_U->reset(ap_rst_n_inv);
    start_for_computedEe_U->if_read_ce(ap_var_for_const0);
    start_for_computedEe_U->if_write_ce(ap_var_for_const0);
    start_for_computedEe_U->if_din(start_for_compute_add_U0_din);
    start_for_computedEe_U->if_full_n(start_for_compute_add_U0_full_n);
    start_for_computedEe_U->if_write(krnl_vadd_entry42_U0_start_write);
    start_for_computedEe_U->if_dout(start_for_compute_add_U0_dout);
    start_for_computedEe_U->if_empty_n(start_for_compute_add_U0_empty_n);
    start_for_computedEe_U->if_read(compute_add_U0_ap_ready);
    start_for_store_reOg_U = new start_for_store_reOg("start_for_store_reOg_U");
    start_for_store_reOg_U->clk(ap_clk);
    start_for_store_reOg_U->reset(ap_rst_n_inv);
    start_for_store_reOg_U->if_read_ce(ap_var_for_const0);
    start_for_store_reOg_U->if_write_ce(ap_var_for_const0);
    start_for_store_reOg_U->if_din(start_for_store_result_U0_din);
    start_for_store_reOg_U->if_full_n(start_for_store_result_U0_full_n);
    start_for_store_reOg_U->if_write(compute_add_U0_start_write);
    start_for_store_reOg_U->if_dout(start_for_store_result_U0_dout);
    start_for_store_reOg_U->if_empty_n(start_for_store_result_U0_empty_n);
    start_for_store_reOg_U->if_read(store_result_U0_ap_ready);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_compute_add_U0_ap_continue);

    SC_METHOD(thread_compute_add_U0_ap_start);
    sensitive << ( start_for_compute_add_U0_empty_n );

    SC_METHOD(thread_in1_TREADY);
    sensitive << ( load_input20_U0_in1_TREADY );

    SC_METHOD(thread_in2_TREADY);
    sensitive << ( load_input_U0_in2_TREADY );

    SC_METHOD(thread_krnl_vadd_entry42_U0_ap_continue);

    SC_METHOD(thread_krnl_vadd_entry42_U0_ap_start);

    SC_METHOD(thread_load_input20_U0_ap_continue);

    SC_METHOD(thread_load_input20_U0_ap_start);

    SC_METHOD(thread_load_input20_U0_start_full_n);

    SC_METHOD(thread_load_input20_U0_start_write);

    SC_METHOD(thread_load_input_U0_ap_continue);

    SC_METHOD(thread_load_input_U0_ap_start);

    SC_METHOD(thread_load_input_U0_start_full_n);

    SC_METHOD(thread_load_input_U0_start_write);

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( store_result_U0_out_r_TDATA );

    SC_METHOD(thread_out_r_TDEST);
    sensitive << ( store_result_U0_out_r_TDEST );

    SC_METHOD(thread_out_r_TID);
    sensitive << ( store_result_U0_out_r_TID );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( store_result_U0_out_r_TKEEP );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( store_result_U0_out_r_TLAST );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( store_result_U0_out_r_TSTRB );

    SC_METHOD(thread_out_r_TUSER);
    sensitive << ( store_result_U0_out_r_TUSER );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( store_result_U0_out_r_TVALID );

    SC_METHOD(thread_start_for_compute_add_U0_din);

    SC_METHOD(thread_start_for_store_result_U0_din);

    SC_METHOD(thread_store_result_U0_ap_continue);

    SC_METHOD(thread_store_result_U0_ap_start);
    sensitive << ( start_for_store_result_U0_empty_n );

    SC_METHOD(thread_store_result_U0_start_full_n);

    SC_METHOD(thread_store_result_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "krnl_vadd_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in1_TDATA, "(port)in1_TDATA");
    sc_trace(mVcdFile, in1_TKEEP, "(port)in1_TKEEP");
    sc_trace(mVcdFile, in1_TSTRB, "(port)in1_TSTRB");
    sc_trace(mVcdFile, in1_TUSER, "(port)in1_TUSER");
    sc_trace(mVcdFile, in1_TLAST, "(port)in1_TLAST");
    sc_trace(mVcdFile, in1_TID, "(port)in1_TID");
    sc_trace(mVcdFile, in1_TDEST, "(port)in1_TDEST");
    sc_trace(mVcdFile, in2_TDATA, "(port)in2_TDATA");
    sc_trace(mVcdFile, in2_TKEEP, "(port)in2_TKEEP");
    sc_trace(mVcdFile, in2_TSTRB, "(port)in2_TSTRB");
    sc_trace(mVcdFile, in2_TUSER, "(port)in2_TUSER");
    sc_trace(mVcdFile, in2_TLAST, "(port)in2_TLAST");
    sc_trace(mVcdFile, in2_TID, "(port)in2_TID");
    sc_trace(mVcdFile, in2_TDEST, "(port)in2_TDEST");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TUSER, "(port)out_r_TUSER");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, out_r_TID, "(port)out_r_TID");
    sc_trace(mVcdFile, out_r_TDEST, "(port)out_r_TDEST");
    sc_trace(mVcdFile, in1_TVALID, "(port)in1_TVALID");
    sc_trace(mVcdFile, in1_TREADY, "(port)in1_TREADY");
    sc_trace(mVcdFile, in2_TVALID, "(port)in2_TVALID");
    sc_trace(mVcdFile, in2_TREADY, "(port)in2_TREADY");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, a, "a");
    sc_trace(mVcdFile, size, "size");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_ap_start, "krnl_vadd_entry42_U0_ap_start");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_ap_done, "krnl_vadd_entry42_U0_ap_done");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_ap_continue, "krnl_vadd_entry42_U0_ap_continue");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_ap_idle, "krnl_vadd_entry42_U0_ap_idle");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_ap_ready, "krnl_vadd_entry42_U0_ap_ready");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_start_out, "krnl_vadd_entry42_U0_start_out");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_start_write, "krnl_vadd_entry42_U0_start_write");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_a_out_din, "krnl_vadd_entry42_U0_a_out_din");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_a_out_write, "krnl_vadd_entry42_U0_a_out_write");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_size_out_din, "krnl_vadd_entry42_U0_size_out_din");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_size_out_write, "krnl_vadd_entry42_U0_size_out_write");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_size_out1_din, "krnl_vadd_entry42_U0_size_out1_din");
    sc_trace(mVcdFile, krnl_vadd_entry42_U0_size_out1_write, "krnl_vadd_entry42_U0_size_out1_write");
    sc_trace(mVcdFile, load_input20_U0_ap_start, "load_input20_U0_ap_start");
    sc_trace(mVcdFile, load_input20_U0_ap_done, "load_input20_U0_ap_done");
    sc_trace(mVcdFile, load_input20_U0_ap_continue, "load_input20_U0_ap_continue");
    sc_trace(mVcdFile, load_input20_U0_ap_idle, "load_input20_U0_ap_idle");
    sc_trace(mVcdFile, load_input20_U0_ap_ready, "load_input20_U0_ap_ready");
    sc_trace(mVcdFile, load_input20_U0_in1_TREADY, "load_input20_U0_in1_TREADY");
    sc_trace(mVcdFile, load_input20_U0_size_read, "load_input20_U0_size_read");
    sc_trace(mVcdFile, load_input20_U0_size_out_din, "load_input20_U0_size_out_din");
    sc_trace(mVcdFile, load_input20_U0_size_out_write, "load_input20_U0_size_out_write");
    sc_trace(mVcdFile, load_input20_U0_in1_stream_V_din, "load_input20_U0_in1_stream_V_din");
    sc_trace(mVcdFile, load_input20_U0_in1_stream_V_write, "load_input20_U0_in1_stream_V_write");
    sc_trace(mVcdFile, load_input_U0_ap_start, "load_input_U0_ap_start");
    sc_trace(mVcdFile, load_input_U0_ap_done, "load_input_U0_ap_done");
    sc_trace(mVcdFile, load_input_U0_ap_continue, "load_input_U0_ap_continue");
    sc_trace(mVcdFile, load_input_U0_ap_idle, "load_input_U0_ap_idle");
    sc_trace(mVcdFile, load_input_U0_ap_ready, "load_input_U0_ap_ready");
    sc_trace(mVcdFile, load_input_U0_in2_TREADY, "load_input_U0_in2_TREADY");
    sc_trace(mVcdFile, load_input_U0_size_read, "load_input_U0_size_read");
    sc_trace(mVcdFile, load_input_U0_in2_stream_V_din, "load_input_U0_in2_stream_V_din");
    sc_trace(mVcdFile, load_input_U0_in2_stream_V_write, "load_input_U0_in2_stream_V_write");
    sc_trace(mVcdFile, compute_add_U0_ap_start, "compute_add_U0_ap_start");
    sc_trace(mVcdFile, compute_add_U0_ap_done, "compute_add_U0_ap_done");
    sc_trace(mVcdFile, compute_add_U0_ap_continue, "compute_add_U0_ap_continue");
    sc_trace(mVcdFile, compute_add_U0_ap_idle, "compute_add_U0_ap_idle");
    sc_trace(mVcdFile, compute_add_U0_ap_ready, "compute_add_U0_ap_ready");
    sc_trace(mVcdFile, compute_add_U0_start_out, "compute_add_U0_start_out");
    sc_trace(mVcdFile, compute_add_U0_start_write, "compute_add_U0_start_write");
    sc_trace(mVcdFile, compute_add_U0_a_read, "compute_add_U0_a_read");
    sc_trace(mVcdFile, compute_add_U0_size_read, "compute_add_U0_size_read");
    sc_trace(mVcdFile, compute_add_U0_size_out_din, "compute_add_U0_size_out_din");
    sc_trace(mVcdFile, compute_add_U0_size_out_write, "compute_add_U0_size_out_write");
    sc_trace(mVcdFile, compute_add_U0_in1_stream_V_read, "compute_add_U0_in1_stream_V_read");
    sc_trace(mVcdFile, compute_add_U0_in2_stream_V_read, "compute_add_U0_in2_stream_V_read");
    sc_trace(mVcdFile, compute_add_U0_out_stream_V_din, "compute_add_U0_out_stream_V_din");
    sc_trace(mVcdFile, compute_add_U0_out_stream_V_write, "compute_add_U0_out_stream_V_write");
    sc_trace(mVcdFile, store_result_U0_ap_start, "store_result_U0_ap_start");
    sc_trace(mVcdFile, store_result_U0_ap_done, "store_result_U0_ap_done");
    sc_trace(mVcdFile, store_result_U0_ap_continue, "store_result_U0_ap_continue");
    sc_trace(mVcdFile, store_result_U0_ap_idle, "store_result_U0_ap_idle");
    sc_trace(mVcdFile, store_result_U0_ap_ready, "store_result_U0_ap_ready");
    sc_trace(mVcdFile, store_result_U0_out_r_TDATA, "store_result_U0_out_r_TDATA");
    sc_trace(mVcdFile, store_result_U0_out_r_TVALID, "store_result_U0_out_r_TVALID");
    sc_trace(mVcdFile, store_result_U0_out_r_TKEEP, "store_result_U0_out_r_TKEEP");
    sc_trace(mVcdFile, store_result_U0_out_r_TSTRB, "store_result_U0_out_r_TSTRB");
    sc_trace(mVcdFile, store_result_U0_out_r_TUSER, "store_result_U0_out_r_TUSER");
    sc_trace(mVcdFile, store_result_U0_out_r_TLAST, "store_result_U0_out_r_TLAST");
    sc_trace(mVcdFile, store_result_U0_out_r_TID, "store_result_U0_out_r_TID");
    sc_trace(mVcdFile, store_result_U0_out_r_TDEST, "store_result_U0_out_r_TDEST");
    sc_trace(mVcdFile, store_result_U0_size_read, "store_result_U0_size_read");
    sc_trace(mVcdFile, store_result_U0_out_stream_V_read, "store_result_U0_out_stream_V_read");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, a_c_full_n, "a_c_full_n");
    sc_trace(mVcdFile, a_c_dout, "a_c_dout");
    sc_trace(mVcdFile, a_c_empty_n, "a_c_empty_n");
    sc_trace(mVcdFile, size_c_full_n, "size_c_full_n");
    sc_trace(mVcdFile, size_c_dout, "size_c_dout");
    sc_trace(mVcdFile, size_c_empty_n, "size_c_empty_n");
    sc_trace(mVcdFile, size_c9_full_n, "size_c9_full_n");
    sc_trace(mVcdFile, size_c9_dout, "size_c9_dout");
    sc_trace(mVcdFile, size_c9_empty_n, "size_c9_empty_n");
    sc_trace(mVcdFile, size_c10_full_n, "size_c10_full_n");
    sc_trace(mVcdFile, size_c10_dout, "size_c10_dout");
    sc_trace(mVcdFile, size_c10_empty_n, "size_c10_empty_n");
    sc_trace(mVcdFile, in1_stream_V_full_n, "in1_stream_V_full_n");
    sc_trace(mVcdFile, in1_stream_V_dout, "in1_stream_V_dout");
    sc_trace(mVcdFile, in1_stream_V_empty_n, "in1_stream_V_empty_n");
    sc_trace(mVcdFile, in2_stream_V_full_n, "in2_stream_V_full_n");
    sc_trace(mVcdFile, in2_stream_V_dout, "in2_stream_V_dout");
    sc_trace(mVcdFile, in2_stream_V_empty_n, "in2_stream_V_empty_n");
    sc_trace(mVcdFile, size_c11_full_n, "size_c11_full_n");
    sc_trace(mVcdFile, size_c11_dout, "size_c11_dout");
    sc_trace(mVcdFile, size_c11_empty_n, "size_c11_empty_n");
    sc_trace(mVcdFile, out_stream_V_full_n, "out_stream_V_full_n");
    sc_trace(mVcdFile, out_stream_V_dout, "out_stream_V_dout");
    sc_trace(mVcdFile, out_stream_V_empty_n, "out_stream_V_empty_n");
    sc_trace(mVcdFile, start_for_compute_add_U0_din, "start_for_compute_add_U0_din");
    sc_trace(mVcdFile, start_for_compute_add_U0_full_n, "start_for_compute_add_U0_full_n");
    sc_trace(mVcdFile, start_for_compute_add_U0_dout, "start_for_compute_add_U0_dout");
    sc_trace(mVcdFile, start_for_compute_add_U0_empty_n, "start_for_compute_add_U0_empty_n");
    sc_trace(mVcdFile, load_input20_U0_start_full_n, "load_input20_U0_start_full_n");
    sc_trace(mVcdFile, load_input20_U0_start_write, "load_input20_U0_start_write");
    sc_trace(mVcdFile, load_input_U0_start_full_n, "load_input_U0_start_full_n");
    sc_trace(mVcdFile, load_input_U0_start_write, "load_input_U0_start_write");
    sc_trace(mVcdFile, start_for_store_result_U0_din, "start_for_store_result_U0_din");
    sc_trace(mVcdFile, start_for_store_result_U0_full_n, "start_for_store_result_U0_full_n");
    sc_trace(mVcdFile, start_for_store_result_U0_dout, "start_for_store_result_U0_dout");
    sc_trace(mVcdFile, start_for_store_result_U0_empty_n, "start_for_store_result_U0_empty_n");
    sc_trace(mVcdFile, store_result_U0_start_full_n, "store_result_U0_start_full_n");
    sc_trace(mVcdFile, store_result_U0_start_write, "store_result_U0_start_write");
#endif

    }
    mHdltvinHandle.open("krnl_vadd.hdltvin.dat");
    mHdltvoutHandle.open("krnl_vadd.hdltvout.dat");
}

krnl_vadd::~krnl_vadd() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete krnl_vadd_AXILiteS_s_axi_U;
    delete krnl_vadd_entry42_U0;
    delete load_input20_U0;
    delete load_input_U0;
    delete compute_add_U0;
    delete store_result_U0;
    delete a_c_U;
    delete size_c_U;
    delete size_c9_U;
    delete size_c10_U;
    delete in1_stream_V_U;
    delete in2_stream_V_U;
    delete size_c11_U;
    delete out_stream_V_U;
    delete start_for_computedEe_U;
    delete start_for_store_reOg_U;
}

void krnl_vadd::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void krnl_vadd::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void krnl_vadd::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void krnl_vadd::thread_compute_add_U0_ap_continue() {
    compute_add_U0_ap_continue = ap_const_logic_1;
}

void krnl_vadd::thread_compute_add_U0_ap_start() {
    compute_add_U0_ap_start = start_for_compute_add_U0_empty_n.read();
}

void krnl_vadd::thread_in1_TREADY() {
    in1_TREADY = load_input20_U0_in1_TREADY.read();
}

void krnl_vadd::thread_in2_TREADY() {
    in2_TREADY = load_input_U0_in2_TREADY.read();
}

void krnl_vadd::thread_krnl_vadd_entry42_U0_ap_continue() {
    krnl_vadd_entry42_U0_ap_continue = ap_const_logic_1;
}

void krnl_vadd::thread_krnl_vadd_entry42_U0_ap_start() {
    krnl_vadd_entry42_U0_ap_start = ap_const_logic_1;
}

void krnl_vadd::thread_load_input20_U0_ap_continue() {
    load_input20_U0_ap_continue = ap_const_logic_1;
}

void krnl_vadd::thread_load_input20_U0_ap_start() {
    load_input20_U0_ap_start = ap_const_logic_1;
}

void krnl_vadd::thread_load_input20_U0_start_full_n() {
    load_input20_U0_start_full_n = ap_const_logic_1;
}

void krnl_vadd::thread_load_input20_U0_start_write() {
    load_input20_U0_start_write = ap_const_logic_0;
}

void krnl_vadd::thread_load_input_U0_ap_continue() {
    load_input_U0_ap_continue = ap_const_logic_1;
}

void krnl_vadd::thread_load_input_U0_ap_start() {
    load_input_U0_ap_start = ap_const_logic_1;
}

void krnl_vadd::thread_load_input_U0_start_full_n() {
    load_input_U0_start_full_n = ap_const_logic_1;
}

void krnl_vadd::thread_load_input_U0_start_write() {
    load_input_U0_start_write = ap_const_logic_0;
}

void krnl_vadd::thread_out_r_TDATA() {
    out_r_TDATA = store_result_U0_out_r_TDATA.read();
}

void krnl_vadd::thread_out_r_TDEST() {
    out_r_TDEST = store_result_U0_out_r_TDEST.read();
}

void krnl_vadd::thread_out_r_TID() {
    out_r_TID = store_result_U0_out_r_TID.read();
}

void krnl_vadd::thread_out_r_TKEEP() {
    out_r_TKEEP = store_result_U0_out_r_TKEEP.read();
}

void krnl_vadd::thread_out_r_TLAST() {
    out_r_TLAST = store_result_U0_out_r_TLAST.read();
}

void krnl_vadd::thread_out_r_TSTRB() {
    out_r_TSTRB = store_result_U0_out_r_TSTRB.read();
}

void krnl_vadd::thread_out_r_TUSER() {
    out_r_TUSER = store_result_U0_out_r_TUSER.read();
}

void krnl_vadd::thread_out_r_TVALID() {
    out_r_TVALID = store_result_U0_out_r_TVALID.read();
}

void krnl_vadd::thread_start_for_compute_add_U0_din() {
    start_for_compute_add_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void krnl_vadd::thread_start_for_store_result_U0_din() {
    start_for_store_result_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void krnl_vadd::thread_store_result_U0_ap_continue() {
    store_result_U0_ap_continue = ap_const_logic_1;
}

void krnl_vadd::thread_store_result_U0_ap_start() {
    store_result_U0_ap_start = start_for_store_result_U0_empty_n.read();
}

void krnl_vadd::thread_store_result_U0_start_full_n() {
    store_result_U0_start_full_n = ap_const_logic_1;
}

void krnl_vadd::thread_store_result_U0_start_write() {
    store_result_U0_start_write = ap_const_logic_0;
}

void krnl_vadd::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_TDATA\" :  \"" << in1_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_TKEEP\" :  \"" << in1_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_TSTRB\" :  \"" << in1_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_TUSER\" :  \"" << in1_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_TLAST\" :  \"" << in1_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_TID\" :  \"" << in1_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_TDEST\" :  \"" << in1_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_TDATA\" :  \"" << in2_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_TKEEP\" :  \"" << in2_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_TSTRB\" :  \"" << in2_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_TUSER\" :  \"" << in2_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_TLAST\" :  \"" << in2_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_TID\" :  \"" << in2_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_TDEST\" :  \"" << in2_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDATA\" :  \"" << out_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TKEEP\" :  \"" << out_r_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TSTRB\" :  \"" << out_r_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TUSER\" :  \"" << out_r_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TLAST\" :  \"" << out_r_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TID\" :  \"" << out_r_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDEST\" :  \"" << out_r_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_TVALID\" :  \"" << in1_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in1_TREADY\" :  \"" << in1_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_TVALID\" :  \"" << in2_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in2_TREADY\" :  \"" << in2_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TVALID\" :  \"" << out_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_TREADY\" :  \"" << out_r_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

