// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _krnl_vadd_HH_
#define _krnl_vadd_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "krnl_vadd_entry42.h"
#include "load_input20.h"
#include "load_input.h"
#include "compute_add.h"
#include "store_result.h"
#include "fifo_w32_d3_A.h"
#include "fifo_w32_d2_A.h"
#include "start_for_computedEe.h"
#include "start_for_store_reOg.h"
#include "krnl_vadd_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct krnl_vadd : public sc_module {
    // Port declarations 46
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > in1_TDATA;
    sc_in< sc_lv<4> > in1_TKEEP;
    sc_in< sc_lv<4> > in1_TSTRB;
    sc_in< sc_lv<4> > in1_TUSER;
    sc_in< sc_lv<1> > in1_TLAST;
    sc_in< sc_lv<5> > in1_TID;
    sc_in< sc_lv<5> > in1_TDEST;
    sc_in< sc_lv<32> > in2_TDATA;
    sc_in< sc_lv<4> > in2_TKEEP;
    sc_in< sc_lv<4> > in2_TSTRB;
    sc_in< sc_lv<4> > in2_TUSER;
    sc_in< sc_lv<1> > in2_TLAST;
    sc_in< sc_lv<5> > in2_TID;
    sc_in< sc_lv<5> > in2_TDEST;
    sc_out< sc_lv<32> > out_r_TDATA;
    sc_out< sc_lv<4> > out_r_TKEEP;
    sc_out< sc_lv<4> > out_r_TSTRB;
    sc_out< sc_lv<4> > out_r_TUSER;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_out< sc_lv<5> > out_r_TID;
    sc_out< sc_lv<5> > out_r_TDEST;
    sc_in< sc_logic > in1_TVALID;
    sc_out< sc_logic > in1_TREADY;
    sc_in< sc_logic > in2_TVALID;
    sc_out< sc_logic > in2_TREADY;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    krnl_vadd(sc_module_name name);
    SC_HAS_PROCESS(krnl_vadd);

    ~krnl_vadd();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    krnl_vadd_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* krnl_vadd_AXILiteS_s_axi_U;
    krnl_vadd_entry42* krnl_vadd_entry42_U0;
    load_input20* load_input20_U0;
    load_input* load_input_U0;
    compute_add* compute_add_U0;
    store_result* store_result_U0;
    fifo_w32_d3_A* a_c_U;
    fifo_w32_d2_A* size_c_U;
    fifo_w32_d2_A* size_c9_U;
    fifo_w32_d2_A* size_c10_U;
    fifo_w32_d2_A* in1_stream_V_U;
    fifo_w32_d2_A* in2_stream_V_U;
    fifo_w32_d2_A* size_c11_U;
    fifo_w32_d2_A* out_stream_V_U;
    start_for_computedEe* start_for_computedEe_U;
    start_for_store_reOg* start_for_store_reOg_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > a;
    sc_signal< sc_lv<32> > size;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_ap_start;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_ap_done;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_ap_continue;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_ap_idle;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_ap_ready;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_start_out;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_start_write;
    sc_signal< sc_lv<32> > krnl_vadd_entry42_U0_a_out_din;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_a_out_write;
    sc_signal< sc_lv<32> > krnl_vadd_entry42_U0_size_out_din;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_size_out_write;
    sc_signal< sc_lv<32> > krnl_vadd_entry42_U0_size_out1_din;
    sc_signal< sc_logic > krnl_vadd_entry42_U0_size_out1_write;
    sc_signal< sc_logic > load_input20_U0_ap_start;
    sc_signal< sc_logic > load_input20_U0_ap_done;
    sc_signal< sc_logic > load_input20_U0_ap_continue;
    sc_signal< sc_logic > load_input20_U0_ap_idle;
    sc_signal< sc_logic > load_input20_U0_ap_ready;
    sc_signal< sc_logic > load_input20_U0_in1_TREADY;
    sc_signal< sc_logic > load_input20_U0_size_read;
    sc_signal< sc_lv<32> > load_input20_U0_size_out_din;
    sc_signal< sc_logic > load_input20_U0_size_out_write;
    sc_signal< sc_lv<32> > load_input20_U0_in1_stream_V_din;
    sc_signal< sc_logic > load_input20_U0_in1_stream_V_write;
    sc_signal< sc_logic > load_input_U0_ap_start;
    sc_signal< sc_logic > load_input_U0_ap_done;
    sc_signal< sc_logic > load_input_U0_ap_continue;
    sc_signal< sc_logic > load_input_U0_ap_idle;
    sc_signal< sc_logic > load_input_U0_ap_ready;
    sc_signal< sc_logic > load_input_U0_in2_TREADY;
    sc_signal< sc_logic > load_input_U0_size_read;
    sc_signal< sc_lv<32> > load_input_U0_in2_stream_V_din;
    sc_signal< sc_logic > load_input_U0_in2_stream_V_write;
    sc_signal< sc_logic > compute_add_U0_ap_start;
    sc_signal< sc_logic > compute_add_U0_ap_done;
    sc_signal< sc_logic > compute_add_U0_ap_continue;
    sc_signal< sc_logic > compute_add_U0_ap_idle;
    sc_signal< sc_logic > compute_add_U0_ap_ready;
    sc_signal< sc_logic > compute_add_U0_start_out;
    sc_signal< sc_logic > compute_add_U0_start_write;
    sc_signal< sc_logic > compute_add_U0_a_read;
    sc_signal< sc_logic > compute_add_U0_size_read;
    sc_signal< sc_lv<32> > compute_add_U0_size_out_din;
    sc_signal< sc_logic > compute_add_U0_size_out_write;
    sc_signal< sc_logic > compute_add_U0_in1_stream_V_read;
    sc_signal< sc_logic > compute_add_U0_in2_stream_V_read;
    sc_signal< sc_lv<32> > compute_add_U0_out_stream_V_din;
    sc_signal< sc_logic > compute_add_U0_out_stream_V_write;
    sc_signal< sc_logic > store_result_U0_ap_start;
    sc_signal< sc_logic > store_result_U0_ap_done;
    sc_signal< sc_logic > store_result_U0_ap_continue;
    sc_signal< sc_logic > store_result_U0_ap_idle;
    sc_signal< sc_logic > store_result_U0_ap_ready;
    sc_signal< sc_lv<32> > store_result_U0_out_r_TDATA;
    sc_signal< sc_logic > store_result_U0_out_r_TVALID;
    sc_signal< sc_lv<4> > store_result_U0_out_r_TKEEP;
    sc_signal< sc_lv<4> > store_result_U0_out_r_TSTRB;
    sc_signal< sc_lv<4> > store_result_U0_out_r_TUSER;
    sc_signal< sc_lv<1> > store_result_U0_out_r_TLAST;
    sc_signal< sc_lv<5> > store_result_U0_out_r_TID;
    sc_signal< sc_lv<5> > store_result_U0_out_r_TDEST;
    sc_signal< sc_logic > store_result_U0_size_read;
    sc_signal< sc_logic > store_result_U0_out_stream_V_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > a_c_full_n;
    sc_signal< sc_lv<32> > a_c_dout;
    sc_signal< sc_logic > a_c_empty_n;
    sc_signal< sc_logic > size_c_full_n;
    sc_signal< sc_lv<32> > size_c_dout;
    sc_signal< sc_logic > size_c_empty_n;
    sc_signal< sc_logic > size_c9_full_n;
    sc_signal< sc_lv<32> > size_c9_dout;
    sc_signal< sc_logic > size_c9_empty_n;
    sc_signal< sc_logic > size_c10_full_n;
    sc_signal< sc_lv<32> > size_c10_dout;
    sc_signal< sc_logic > size_c10_empty_n;
    sc_signal< sc_logic > in1_stream_V_full_n;
    sc_signal< sc_lv<32> > in1_stream_V_dout;
    sc_signal< sc_logic > in1_stream_V_empty_n;
    sc_signal< sc_logic > in2_stream_V_full_n;
    sc_signal< sc_lv<32> > in2_stream_V_dout;
    sc_signal< sc_logic > in2_stream_V_empty_n;
    sc_signal< sc_logic > size_c11_full_n;
    sc_signal< sc_lv<32> > size_c11_dout;
    sc_signal< sc_logic > size_c11_empty_n;
    sc_signal< sc_logic > out_stream_V_full_n;
    sc_signal< sc_lv<32> > out_stream_V_dout;
    sc_signal< sc_logic > out_stream_V_empty_n;
    sc_signal< sc_lv<1> > start_for_compute_add_U0_din;
    sc_signal< sc_logic > start_for_compute_add_U0_full_n;
    sc_signal< sc_lv<1> > start_for_compute_add_U0_dout;
    sc_signal< sc_logic > start_for_compute_add_U0_empty_n;
    sc_signal< sc_logic > load_input20_U0_start_full_n;
    sc_signal< sc_logic > load_input20_U0_start_write;
    sc_signal< sc_logic > load_input_U0_start_full_n;
    sc_signal< sc_logic > load_input_U0_start_write;
    sc_signal< sc_lv<1> > start_for_store_result_U0_din;
    sc_signal< sc_logic > start_for_store_result_U0_full_n;
    sc_signal< sc_lv<1> > start_for_store_result_U0_dout;
    sc_signal< sc_logic > start_for_store_result_U0_empty_n;
    sc_signal< sc_logic > store_result_U0_start_full_n;
    sc_signal< sc_logic > store_result_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_compute_add_U0_ap_continue();
    void thread_compute_add_U0_ap_start();
    void thread_in1_TREADY();
    void thread_in2_TREADY();
    void thread_krnl_vadd_entry42_U0_ap_continue();
    void thread_krnl_vadd_entry42_U0_ap_start();
    void thread_load_input20_U0_ap_continue();
    void thread_load_input20_U0_ap_start();
    void thread_load_input20_U0_start_full_n();
    void thread_load_input20_U0_start_write();
    void thread_load_input_U0_ap_continue();
    void thread_load_input_U0_ap_start();
    void thread_load_input_U0_start_full_n();
    void thread_load_input_U0_start_write();
    void thread_out_r_TDATA();
    void thread_out_r_TDEST();
    void thread_out_r_TID();
    void thread_out_r_TKEEP();
    void thread_out_r_TLAST();
    void thread_out_r_TSTRB();
    void thread_out_r_TUSER();
    void thread_out_r_TVALID();
    void thread_start_for_compute_add_U0_din();
    void thread_start_for_store_result_U0_din();
    void thread_store_result_U0_ap_continue();
    void thread_store_result_U0_ap_start();
    void thread_store_result_U0_start_full_n();
    void thread_store_result_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
