// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "load_input.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic load_input::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic load_input::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> load_input::ap_ST_fsm_state1 = "1";
const sc_lv<3> load_input::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> load_input::ap_ST_fsm_state4 = "100";
const sc_lv<32> load_input::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool load_input::ap_const_boolean_1 = true;
const sc_lv<32> load_input::ap_const_lv32_1 = "1";
const bool load_input::ap_const_boolean_0 = false;
const sc_lv<1> load_input::ap_const_lv1_1 = "1";
const sc_lv<1> load_input::ap_const_lv1_0 = "0";
const sc_lv<31> load_input::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<31> load_input::ap_const_lv31_1 = "1";
const sc_lv<32> load_input::ap_const_lv32_2 = "10";

load_input::load_input(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_in_data_V_U = new regslice_both<32>("regslice_both_in_data_V_U");
    regslice_both_in_data_V_U->ap_clk(ap_clk);
    regslice_both_in_data_V_U->ap_rst(ap_rst);
    regslice_both_in_data_V_U->data_in(in2_TDATA);
    regslice_both_in_data_V_U->vld_in(in2_TVALID);
    regslice_both_in_data_V_U->ack_in(regslice_both_in_data_V_U_ack_in);
    regslice_both_in_data_V_U->data_out(in2_TDATA_int);
    regslice_both_in_data_V_U->vld_out(in2_TVALID_int);
    regslice_both_in_data_V_U->ack_out(in2_TREADY_int);
    regslice_both_in_data_V_U->apdone_blk(regslice_both_in_data_V_U_apdone_blk);
    regslice_both_in_keep_V_U = new regslice_both<4>("regslice_both_in_keep_V_U");
    regslice_both_in_keep_V_U->ap_clk(ap_clk);
    regslice_both_in_keep_V_U->ap_rst(ap_rst);
    regslice_both_in_keep_V_U->data_in(in2_TKEEP);
    regslice_both_in_keep_V_U->vld_in(in2_TVALID);
    regslice_both_in_keep_V_U->ack_in(regslice_both_in_keep_V_U_ack_in);
    regslice_both_in_keep_V_U->data_out(in2_TKEEP_int);
    regslice_both_in_keep_V_U->vld_out(regslice_both_in_keep_V_U_vld_out);
    regslice_both_in_keep_V_U->ack_out(in2_TREADY_int);
    regslice_both_in_keep_V_U->apdone_blk(regslice_both_in_keep_V_U_apdone_blk);
    regslice_both_in_strb_V_U = new regslice_both<4>("regslice_both_in_strb_V_U");
    regslice_both_in_strb_V_U->ap_clk(ap_clk);
    regslice_both_in_strb_V_U->ap_rst(ap_rst);
    regslice_both_in_strb_V_U->data_in(in2_TSTRB);
    regslice_both_in_strb_V_U->vld_in(in2_TVALID);
    regslice_both_in_strb_V_U->ack_in(regslice_both_in_strb_V_U_ack_in);
    regslice_both_in_strb_V_U->data_out(in2_TSTRB_int);
    regslice_both_in_strb_V_U->vld_out(regslice_both_in_strb_V_U_vld_out);
    regslice_both_in_strb_V_U->ack_out(in2_TREADY_int);
    regslice_both_in_strb_V_U->apdone_blk(regslice_both_in_strb_V_U_apdone_blk);
    regslice_both_in_user_V_U = new regslice_both<4>("regslice_both_in_user_V_U");
    regslice_both_in_user_V_U->ap_clk(ap_clk);
    regslice_both_in_user_V_U->ap_rst(ap_rst);
    regslice_both_in_user_V_U->data_in(in2_TUSER);
    regslice_both_in_user_V_U->vld_in(in2_TVALID);
    regslice_both_in_user_V_U->ack_in(regslice_both_in_user_V_U_ack_in);
    regslice_both_in_user_V_U->data_out(in2_TUSER_int);
    regslice_both_in_user_V_U->vld_out(regslice_both_in_user_V_U_vld_out);
    regslice_both_in_user_V_U->ack_out(in2_TREADY_int);
    regslice_both_in_user_V_U->apdone_blk(regslice_both_in_user_V_U_apdone_blk);
    regslice_both_in_last_V_U = new regslice_both<1>("regslice_both_in_last_V_U");
    regslice_both_in_last_V_U->ap_clk(ap_clk);
    regslice_both_in_last_V_U->ap_rst(ap_rst);
    regslice_both_in_last_V_U->data_in(in2_TLAST);
    regslice_both_in_last_V_U->vld_in(in2_TVALID);
    regslice_both_in_last_V_U->ack_in(regslice_both_in_last_V_U_ack_in);
    regslice_both_in_last_V_U->data_out(in2_TLAST_int);
    regslice_both_in_last_V_U->vld_out(regslice_both_in_last_V_U_vld_out);
    regslice_both_in_last_V_U->ack_out(in2_TREADY_int);
    regslice_both_in_last_V_U->apdone_blk(regslice_both_in_last_V_U_apdone_blk);
    regslice_both_in_id_V_U = new regslice_both<5>("regslice_both_in_id_V_U");
    regslice_both_in_id_V_U->ap_clk(ap_clk);
    regslice_both_in_id_V_U->ap_rst(ap_rst);
    regslice_both_in_id_V_U->data_in(in2_TID);
    regslice_both_in_id_V_U->vld_in(in2_TVALID);
    regslice_both_in_id_V_U->ack_in(regslice_both_in_id_V_U_ack_in);
    regslice_both_in_id_V_U->data_out(in2_TID_int);
    regslice_both_in_id_V_U->vld_out(regslice_both_in_id_V_U_vld_out);
    regslice_both_in_id_V_U->ack_out(in2_TREADY_int);
    regslice_both_in_id_V_U->apdone_blk(regslice_both_in_id_V_U_apdone_blk);
    regslice_both_in_dest_V_U = new regslice_both<5>("regslice_both_in_dest_V_U");
    regslice_both_in_dest_V_U->ap_clk(ap_clk);
    regslice_both_in_dest_V_U->ap_rst(ap_rst);
    regslice_both_in_dest_V_U->data_in(in2_TDEST);
    regslice_both_in_dest_V_U->vld_in(in2_TVALID);
    regslice_both_in_dest_V_U->ack_in(regslice_both_in_dest_V_U_ack_in);
    regslice_both_in_dest_V_U->data_out(in2_TDEST_int);
    regslice_both_in_dest_V_U->vld_out(regslice_both_in_dest_V_U_vld_out);
    regslice_both_in_dest_V_U->ack_out(in2_TREADY_int);
    regslice_both_in_dest_V_U->apdone_blk(regslice_both_in_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln10_fu_137_p2);
    sensitive << ( i_0_i_i_reg_117 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in2_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_fu_132_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln10_reg_156 );
    sensitive << ( in2_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in2_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_fu_132_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln10_reg_156 );
    sensitive << ( in2_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in2_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_fu_132_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln10_reg_156 );
    sensitive << ( in2_TVALID_int );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( size_empty_n );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( icmp_ln10_fu_132_p2 );
    sensitive << ( in2_TVALID_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( in2_stream_V_full_n );
    sensitive << ( icmp_ln10_reg_156 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln10_fu_132_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_0_i_i_cast_fu_128_p1);
    sensitive << ( i_0_i_i_reg_117 );

    SC_METHOD(thread_icmp_ln10_fu_132_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( size_read_reg_151 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( i_0_i_i_cast_fu_128_p1 );

    SC_METHOD(thread_in2_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln10_fu_132_p2 );
    sensitive << ( in2_TVALID_int );

    SC_METHOD(thread_in2_TREADY);
    sensitive << ( in2_TVALID );
    sensitive << ( regslice_both_in_data_V_U_ack_in );

    SC_METHOD(thread_in2_TREADY_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_fu_132_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in2_stream_V_blk_n);
    sensitive << ( in2_stream_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln10_reg_156 );

    SC_METHOD(thread_in2_stream_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln10_reg_156 );
    sensitive << ( in_data_V_tmp_reg_165 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_in2_stream_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln10_reg_156 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_size_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( size_empty_n );

    SC_METHOD(thread_size_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( size_empty_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( size_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_fu_132_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "load_input_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in2_TDATA, "(port)in2_TDATA");
    sc_trace(mVcdFile, in2_TVALID, "(port)in2_TVALID");
    sc_trace(mVcdFile, in2_TREADY, "(port)in2_TREADY");
    sc_trace(mVcdFile, in2_TKEEP, "(port)in2_TKEEP");
    sc_trace(mVcdFile, in2_TSTRB, "(port)in2_TSTRB");
    sc_trace(mVcdFile, in2_TUSER, "(port)in2_TUSER");
    sc_trace(mVcdFile, in2_TLAST, "(port)in2_TLAST");
    sc_trace(mVcdFile, in2_TID, "(port)in2_TID");
    sc_trace(mVcdFile, in2_TDEST, "(port)in2_TDEST");
    sc_trace(mVcdFile, size_dout, "(port)size_dout");
    sc_trace(mVcdFile, size_empty_n, "(port)size_empty_n");
    sc_trace(mVcdFile, size_read, "(port)size_read");
    sc_trace(mVcdFile, in2_stream_V_din, "(port)in2_stream_V_din");
    sc_trace(mVcdFile, in2_stream_V_full_n, "(port)in2_stream_V_full_n");
    sc_trace(mVcdFile, in2_stream_V_write, "(port)in2_stream_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in2_TDATA_blk_n, "in2_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln10_fu_132_p2, "icmp_ln10_fu_132_p2");
    sc_trace(mVcdFile, size_blk_n, "size_blk_n");
    sc_trace(mVcdFile, in2_stream_V_blk_n, "in2_stream_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, icmp_ln10_reg_156, "icmp_ln10_reg_156");
    sc_trace(mVcdFile, i_0_i_i_reg_117, "i_0_i_i_reg_117");
    sc_trace(mVcdFile, size_read_reg_151, "size_read_reg_151");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln10_fu_137_p2, "add_ln10_fu_137_p2");
    sc_trace(mVcdFile, in_data_V_tmp_reg_165, "in_data_V_tmp_reg_165");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, i_0_i_i_cast_fu_128_p1, "i_0_i_i_cast_fu_128_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, regslice_both_in_data_V_U_apdone_blk, "regslice_both_in_data_V_U_apdone_blk");
    sc_trace(mVcdFile, in2_TDATA_int, "in2_TDATA_int");
    sc_trace(mVcdFile, in2_TVALID_int, "in2_TVALID_int");
    sc_trace(mVcdFile, in2_TREADY_int, "in2_TREADY_int");
    sc_trace(mVcdFile, regslice_both_in_data_V_U_ack_in, "regslice_both_in_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_keep_V_U_apdone_blk, "regslice_both_in_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, in2_TKEEP_int, "in2_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_in_keep_V_U_vld_out, "regslice_both_in_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_keep_V_U_ack_in, "regslice_both_in_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_strb_V_U_apdone_blk, "regslice_both_in_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, in2_TSTRB_int, "in2_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_in_strb_V_U_vld_out, "regslice_both_in_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_strb_V_U_ack_in, "regslice_both_in_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_user_V_U_apdone_blk, "regslice_both_in_user_V_U_apdone_blk");
    sc_trace(mVcdFile, in2_TUSER_int, "in2_TUSER_int");
    sc_trace(mVcdFile, regslice_both_in_user_V_U_vld_out, "regslice_both_in_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_user_V_U_ack_in, "regslice_both_in_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_last_V_U_apdone_blk, "regslice_both_in_last_V_U_apdone_blk");
    sc_trace(mVcdFile, in2_TLAST_int, "in2_TLAST_int");
    sc_trace(mVcdFile, regslice_both_in_last_V_U_vld_out, "regslice_both_in_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_last_V_U_ack_in, "regslice_both_in_last_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_id_V_U_apdone_blk, "regslice_both_in_id_V_U_apdone_blk");
    sc_trace(mVcdFile, in2_TID_int, "in2_TID_int");
    sc_trace(mVcdFile, regslice_both_in_id_V_U_vld_out, "regslice_both_in_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_id_V_U_ack_in, "regslice_both_in_id_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_in_dest_V_U_apdone_blk, "regslice_both_in_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, in2_TDEST_int, "in2_TDEST_int");
    sc_trace(mVcdFile, regslice_both_in_dest_V_U_vld_out, "regslice_both_in_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_in_dest_V_U_ack_in, "regslice_both_in_dest_V_U_ack_in");
#endif

    }
}

load_input::~load_input() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_in_data_V_U;
    delete regslice_both_in_keep_V_U;
    delete regslice_both_in_strb_V_U;
    delete regslice_both_in_user_V_U;
    delete regslice_both_in_last_V_U;
    delete regslice_both_in_id_V_U;
    delete regslice_both_in_dest_V_U;
}

void load_input::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_i_i_reg_117 = add_ln10_fu_137_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read())))) {
        i_0_i_i_reg_117 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln10_reg_156 = icmp_ln10_fu_132_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_data_V_tmp_reg_165 = in2_TDATA_int.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read())))) {
        size_read_reg_151 = size_dout.read();
    }
}

void load_input::thread_add_ln10_fu_137_p2() {
    add_ln10_fu_137_p2 = (!i_0_i_i_reg_117.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_i_i_reg_117.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void load_input::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void load_input::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void load_input::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void load_input::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_input::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in2_stream_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in2_TVALID_int.read())));
}

void load_input::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in2_stream_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in2_TVALID_int.read())));
}

void load_input::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in2_stream_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in2_TVALID_int.read())));
}

void load_input::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read()));
}

void load_input::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, in2_TVALID_int.read()));
}

void load_input::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_reg_156.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in2_stream_V_full_n.read()));
}

void load_input::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void load_input::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void load_input::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void load_input::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void load_input::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void load_input::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void load_input::thread_i_0_i_i_cast_fu_128_p1() {
    i_0_i_i_cast_fu_128_p1 = esl_zext<32,31>(i_0_i_i_reg_117.read());
}

void load_input::thread_icmp_ln10_fu_132_p2() {
    icmp_ln10_fu_132_p2 = (!i_0_i_i_cast_fu_128_p1.read().is_01() || !size_read_reg_151.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_0_i_i_cast_fu_128_p1.read()) < sc_bigint<32>(size_read_reg_151.read()));
}

void load_input::thread_in2_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_1))) {
        in2_TDATA_blk_n = in2_TVALID_int.read();
    } else {
        in2_TDATA_blk_n = ap_const_logic_1;
    }
}

void load_input::thread_in2_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, in2_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_in_data_V_U_ack_in.read()))) {
        in2_TREADY = ap_const_logic_1;
    } else {
        in2_TREADY = ap_const_logic_0;
    }
}

void load_input::thread_in2_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in2_TREADY_int = ap_const_logic_1;
    } else {
        in2_TREADY_int = ap_const_logic_0;
    }
}

void load_input::thread_in2_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_reg_156.read()))) {
        in2_stream_V_blk_n = in2_stream_V_full_n.read();
    } else {
        in2_stream_V_blk_n = ap_const_logic_1;
    }
}

void load_input::thread_in2_stream_V_din() {
    in2_stream_V_din = in_data_V_tmp_reg_165.read();
}

void load_input::thread_in2_stream_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_reg_156.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in2_stream_V_write = ap_const_logic_1;
    } else {
        in2_stream_V_write = ap_const_logic_0;
    }
}

void load_input::thread_size_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        size_blk_n = size_empty_n.read();
    } else {
        size_blk_n = ap_const_logic_1;
    }
}

void load_input::thread_size_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read())))) {
        size_read = ap_const_logic_1;
    } else {
        size_read = ap_const_logic_0;
    }
}

void load_input::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, size_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln10_fu_132_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

