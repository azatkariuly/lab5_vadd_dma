// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _load_input_HH_
#define _load_input_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct load_input : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in2_TDATA;
    sc_in< sc_logic > in2_TVALID;
    sc_out< sc_logic > in2_TREADY;
    sc_in< sc_lv<4> > in2_TKEEP;
    sc_in< sc_lv<4> > in2_TSTRB;
    sc_in< sc_lv<4> > in2_TUSER;
    sc_in< sc_lv<1> > in2_TLAST;
    sc_in< sc_lv<5> > in2_TID;
    sc_in< sc_lv<5> > in2_TDEST;
    sc_in< sc_lv<32> > size_dout;
    sc_in< sc_logic > size_empty_n;
    sc_out< sc_logic > size_read;
    sc_out< sc_lv<32> > in2_stream_V_din;
    sc_in< sc_logic > in2_stream_V_full_n;
    sc_out< sc_logic > in2_stream_V_write;


    // Module declarations
    load_input(sc_module_name name);
    SC_HAS_PROCESS(load_input);

    ~load_input();

    sc_trace_file* mVcdFile;

    regslice_both<32>* regslice_both_in_data_V_U;
    regslice_both<4>* regslice_both_in_keep_V_U;
    regslice_both<4>* regslice_both_in_strb_V_U;
    regslice_both<4>* regslice_both_in_user_V_U;
    regslice_both<1>* regslice_both_in_last_V_U;
    regslice_both<5>* regslice_both_in_id_V_U;
    regslice_both<5>* regslice_both_in_dest_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in2_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln10_fu_132_p2;
    sc_signal< sc_logic > size_blk_n;
    sc_signal< sc_logic > in2_stream_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln10_reg_156;
    sc_signal< sc_lv<31> > i_0_i_i_reg_117;
    sc_signal< sc_lv<32> > size_read_reg_151;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > add_ln10_fu_137_p2;
    sc_signal< sc_lv<32> > in_data_V_tmp_reg_165;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > i_0_i_i_cast_fu_128_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_in_data_V_U_apdone_blk;
    sc_signal< sc_lv<32> > in2_TDATA_int;
    sc_signal< sc_logic > in2_TVALID_int;
    sc_signal< sc_logic > in2_TREADY_int;
    sc_signal< sc_logic > regslice_both_in_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_keep_V_U_apdone_blk;
    sc_signal< sc_lv<4> > in2_TKEEP_int;
    sc_signal< sc_logic > regslice_both_in_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_in_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_strb_V_U_apdone_blk;
    sc_signal< sc_lv<4> > in2_TSTRB_int;
    sc_signal< sc_logic > regslice_both_in_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_in_strb_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_user_V_U_apdone_blk;
    sc_signal< sc_lv<4> > in2_TUSER_int;
    sc_signal< sc_logic > regslice_both_in_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_in_user_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > in2_TLAST_int;
    sc_signal< sc_logic > regslice_both_in_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_in_last_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_id_V_U_apdone_blk;
    sc_signal< sc_lv<5> > in2_TID_int;
    sc_signal< sc_logic > regslice_both_in_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_in_id_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_in_dest_V_U_apdone_blk;
    sc_signal< sc_lv<5> > in2_TDEST_int;
    sc_signal< sc_logic > regslice_both_in_dest_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_in_dest_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_137_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_0_i_i_cast_fu_128_p1();
    void thread_icmp_ln10_fu_132_p2();
    void thread_in2_TDATA_blk_n();
    void thread_in2_TREADY();
    void thread_in2_TREADY_int();
    void thread_in2_stream_V_blk_n();
    void thread_in2_stream_V_din();
    void thread_in2_stream_V_write();
    void thread_size_blk_n();
    void thread_size_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
