// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _store_result_HH_
#define _store_result_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct store_result : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_lv<4> > out_r_TKEEP;
    sc_out< sc_lv<4> > out_r_TSTRB;
    sc_out< sc_lv<4> > out_r_TUSER;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_out< sc_lv<5> > out_r_TID;
    sc_out< sc_lv<5> > out_r_TDEST;
    sc_in< sc_lv<32> > size_dout;
    sc_in< sc_logic > size_empty_n;
    sc_out< sc_logic > size_read;
    sc_in< sc_lv<32> > out_stream_V_dout;
    sc_in< sc_logic > out_stream_V_empty_n;
    sc_out< sc_logic > out_stream_V_read;
    sc_signal< sc_lv<4> > ap_var_for_const0;
    sc_signal< sc_lv<4> > ap_var_for_const1;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    store_result(sc_module_name name);
    SC_HAS_PROCESS(store_result);

    ~store_result();

    sc_trace_file* mVcdFile;

    regslice_both<32>* regslice_both_out_data_V_U;
    regslice_both<4>* regslice_both_out_keep_V_U;
    regslice_both<4>* regslice_both_out_strb_V_U;
    regslice_both<4>* regslice_both_out_user_V_U;
    regslice_both<1>* regslice_both_out_last_V_U;
    regslice_both<5>* regslice_both_out_id_V_U;
    regslice_both<5>* regslice_both_out_dest_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > out_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln34_reg_188;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln34_reg_188_pp0_iter1_reg;
    sc_signal< sc_logic > size_blk_n;
    sc_signal< sc_logic > out_stream_V_blk_n;
    sc_signal< sc_lv<31> > i_0_i_i_reg_136;
    sc_signal< sc_lv<32> > size_read_reg_178;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > add_ln37_fu_147_p2;
    sc_signal< sc_lv<32> > add_ln37_reg_183;
    sc_signal< sc_lv<1> > icmp_ln34_fu_157_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > i_fu_162_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln37_fu_168_p2;
    sc_signal< sc_lv<1> > icmp_ln37_reg_197;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > zext_ln34_fu_153_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > regslice_both_out_data_V_U_apdone_blk;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > out_r_TDATA_int;
    sc_signal< sc_logic > out_r_TVALID_int;
    sc_signal< sc_logic > out_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_out_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_out_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_strb_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_out_strb_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_user_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_out_user_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_out_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_id_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_out_id_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_dest_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_out_dest_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_dest_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_add_ln37_fu_147_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_fu_162_p2();
    void thread_icmp_ln34_fu_157_p2();
    void thread_icmp_ln37_fu_168_p2();
    void thread_out_r_TDATA_blk_n();
    void thread_out_r_TDATA_int();
    void thread_out_r_TVALID();
    void thread_out_r_TVALID_int();
    void thread_out_stream_V_blk_n();
    void thread_out_stream_V_read();
    void thread_size_blk_n();
    void thread_size_read();
    void thread_zext_ln34_fu_153_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
